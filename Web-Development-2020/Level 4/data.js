const PAGE_DATA = {
    level: "Level 4",
    title: "Strings and Arrays",
    lessons: [{title:"Advanced Strings", objective:"Objective: To recognize strings as objects.", description:"You think you know strings?<br /><br />You don't know strings.<br /><br />A string is more than just text.  A string is an object.  Think about it.  The computer stores everything as ones and zeroes.  Each character has a numeric code.  A string has multiple characters which means multiple numeric codes which means that a string is not a single entity, but composed of several entities.<br /><br />You know, like an object.<br /><br />That means that a string also has properties and functions that we can use and manipulate through the dot operator.<br /><br />So... a string is an object.  Period.<hr />",slides:[{text:"In order to illustrate some of the functions of a string, we're going to create a simple log program.  You've included logs in your other programs, but this will show you how to manipulate the strings in your log and allow the user to add to your log as well.<br /><br />Let's start with the basic HTML needed.  If you've never seen a <i>textarea</i> tag before, it's no big deal.  It works similarly to a text box, but it's bigger and has its own tag instead of being part of the 'input' family.  You can put text inside the textarea by giving it some innerHTML, but the value property works just as well.",image:"step1.PNG"},{text:"Just for giggles, let's do a little basic styling.  Put a border around the log and expand the width of the textarea.<br /><br />Things like this make the program easier to see and then easier to test.  It's never a good idea to do any real styling before the program is actually finished and running.",image:"step2.PNG"},{text:"And here is initialize() with objects to represent the form and the output.<br /><br />There is a string to represent the log as well.  Once again, it's extremely vital that there is a back end variable to represent your information (in this case our log).  We will be manipulating this log a lot throughout the course of this construction and you definitely <b><i>don't</i></b> want to get caught up doing all of that on screen.",image:"step3.PNG"},{text:"The addMessage() function is called when the button is clicked.  As you can see, there is a parameter being used here.  That's because we want to add a message to the log, but we have no way of knowing what that message is.  That means that the function call is responsible for providing that information.<br /><br />If you go back to the button, you'll see that the function call uses the log object we created in initialize to grab the value of the textarea.<br /><br />This may seem a bit convoluted, but doing it this way opens up possibilities for expanding our code without having to rewrite our code.",image:"step4.PNG"},{text:"There's nothing new or fancy here.  We concatenate the new message onto the log and display it.<br /><br />This will work if you want to try it.<br /><br />Try it.",image:"step5.PNG"},{text:"It's not very pretty is it?<br /><br />This is string building.  When you're creating output, you need to think about what your users will see on your page.  Just tacking one piece of information onto another doesn't cut it.<br /><br />Soooooo... Throw in something to break up the monotony.  A space, a comma, a <i>br</i>.Hmmm...  A <i>br</i>.<br /><br />That's right.  You can insert HTML tags into the innerHTML of other tags.  Don't, however, get caught up in it.  Using innerHTML is <b><i>NOT</i></b> a clever way of adding tags to your page dynamically.  There's a proper way to do that coming up in Level 6.  Using innerHTML is like hammering the round peg into the square hole.",image:"step6.PNG"},{text:"Let's talk about validating the input.  When you want to validate the input, you have to ask the question, 'What do you do if the input is valid?  What do you do if it isn't?'<br /><br />For this exercise, let's pretend that there's a group of characters that we don't want in our log for one reason or another. Let's store those characters in a string.  In fact, let's make that string a constant value so it cannot change.<br /><br />A constant is defined using the <i>const</i> keyword and given a value the same as any other variable.  You must define it outside of a function so that it is entirely global.",image:"step7.PNG"},{text:"Let's write a function to validate our string.<br /><br />Strings are objects (remember?).  As such, they have properties and functions that belong to them.<br /><br />The 'length' of a string is the number of characters in that string.<br /><br />In our loop below, we are going to look at each character in that INVALID_CHARS string.  Since, we're going one at a time, we're going to use a counting loop, a for loop.  The variable 'i' is going to represent the INDEX of the character in the string.<br /><br />We start with index 0, which is the first character in the string.  Whenever you're indexing something, it's a good bet that you'll be starting with 0.",image:"step8.PNG"},{text:"Let's backtrack a moment.  A string is actually just an indexed list of characters.  That means that each character appears in the list, in order, and has a numerical index.  The first character has an index of 0.  The rest of the characters count up from there.<br /><br />It's interesting to note that the last character's index will always be the length of the string minus one.",image:"step8.PNG"},{text:"The for loop starts by setting i to 0 (the first index).  The condition makes sure that i is less than the length of INVALID_CHARS.  That means that, once i reaches that length, the loop will end.  It adds 1 to i after each iteration, ensuring that i will eventually reach the end.",image:"step8.PNG"},{text:"For each invalid character, search the msg string and see if that invalid character is in it.  If it is, return false because the message is invalid.<br /><br />The indexOf() function searches a string for a particular character or other string and returns the starting index of that character or string.  If the character or string is not found, it returns -1.<br /><br />The charAt() function returns the character at a particular index.",image:"step9.PNG"},{text:"So what we're doing here is that we are grabbing the character at index i and passing it into the indexOf function as an argument.  The indexOf function is searching the INVALID_CHARS string for that character.  If it finds it, it will return the index of that invalid character.  If it doesn't find it, it will return -1.  If the return value is greater than or equal to 0, it has matched an invalid character in the message.<br /><br />Once an invalid character has been found, it invalidates the whole message, meaning that there's no reason to go on.  Return false to indicate that the message is <b>not valid</b>.",image:"step9.PNG"},{text:"If you're returning false, you've eventually got to return true.  You will instinctively want to add an else to that if and return true, but that would be a mistake.<br /><br />Remember that the conditional which checks for the character is in a loop.  It has to check for all of the characters.  If you have an else that returns true, that means you are ALWAYS returning something based on that conditional.  That means that it will happen during the FIRST iteration (fancy word for cycle) of the loop.  That means you will be checking exactly ONE character and NONE of the others.<br /><br />If this function makes it through the entire loop without returning false, that means that it didn't find even one of those bad characters in the log entry.<br /><br />That means the log entry is valid.<br /><br />Return true.",image:"step10.PNG"},{text:"The next step is to update the addMessage() function so that it use the isValid() function to check whether or not the message, you guessed it, <b><i>is valid</i></b>.<br /><br />Remember that isValid() returns a boolean.  That means that we can check it directly in an if conditional.<br /><br />Here, we call it and pass through the log message.  If it returns true, the message will be added to the log.",image:"step11.PNG"},{text:"It's nice to let the user know that (s)he did something wrong.  By adding an else (which occurs if isValid() returns false), we can add an error message to the log.<br /><br />You can try this now.<br /><br />",image:"step12.PNG"},{text:"The validate() function is going to cleanse the log entry by removing all of the invalid characters.  Then it will return the cleansed message.<br /><br />We're still going to work with the same string of characters and the same loop.<br /><br />Now, however, if we find the character, we want to remove it.",image:"step13.PNG"},{text:"The first thing we have to take into account is that there may be more than once instance of each character in the string and we need to take them all out.<br /><br />There is no function that counts the number of instances of a character in a string so we're going to have to check the string over and over again.<br /><br />That means a loop.",image:"step13.PNG"},{text:"Instead of just checking for the index in an if condition, we store the index in a variable and test it in a while loop.<br /><br />Remember that a while loop continues for as long as the condition is true.  Our condition here is checking to make sure that charIdx, which is created and assigned <i>outside</i> the loop is greater than or equal to 0 (meaning it <i>does</i> exist inthe INVALID_CHARS string.<br /><br />Just keep that in the back of your mind, because we <i>will</i>need to address it.",image:"step14.PNG"},{text:"The substring() function takes in 2 arguments.  The first argument is the start index and the second argument is the end index.  The function returns a string that is comprised of the characters between the start index and the end index (not including the end index).<br /><br />You can omit the end index in order to tell the function to just go to the end of the string.<br /><br />What we do here is we rebuild the string by assigning it 2 substrings concatenated together.  The first substring is all of the characters leading up to the invalid character (as defined by charIdx).  The second substring is all of the characters AFTER the invalid character.",image:"step15.PNG"},{text:"In non-codey terms, we are taking before the invalid character and everything after the invalid character and sticking them together. The ultimate effect of this is that the program just plucks out the bad character and discards it.",image:"step15.PNG"},{text:"At the end of the while loop, we repeat the line of code that found the bad character in the first place.  Remember that we removed one instance of the bad character, but that doesn't mean there isn't another one.  For as long as we keep checking for them and finding them we can keep removing them.  Ultimately, there will be none left and the loop will break itself out.",image:"step16.PNG"},{text:"By the time we exit the for loop, the log entry has been cleansed.<br /><br />Remember that a parameter is a local variable.  What we've done to msg in validate has had no bearing on msg in addMessage.<br /><br />That's why we return the cleansed msg.",image:"step17.PNG"},{text:"The implementation of the validate() function makes addMessage() a whole lot shorter.  Instead of checking to see whether or not the message is valid, we pass it into validate and add what it returns to the log.<rb /><br />If the message was valid in the first place, it will come back in its original form.  Otherwise, it will be returned in a cleansed form.<br /><br />You can run this now.  Try entering all of the invalid characters you like.  It will take them out for you.",image:"step18.PNG"}]}, 
{title:"Arrays", objective:"Objective: To understand how and when to use an indexed list of items.", description:"When I was a kid, there was this video game called Berserk. You played a guy in the middle of an open square and what seemed like an endless swarm of enemy robots came at you from all sides. The game seemed impossible, but people were good at it.<br /><br />Not me.<br /><br />Other people.<br /><br />Think about Berserk from a programmer's perspective. You have to program the player and each robot. Let's say there are 30 robots. Each of those objects needs a variable. That's 31 variables. You can do that. It's a lot of work, but you can do it.<br /><br />But there's a better way. Setting aside the player, you have 30 identical robots. Do you really want to have to juggle the 30 of them, plowing through if conditionals every time you need to see whether or not one touched the player?<br /><br />You would put them into a list, specifically an indexed list otherwise known as an array. An indexed list is a list of items (in this case robot variables) where each item has a number assigned to it. The first one is 0. So now, instead of coding the checks for each robot manually, you can tell the computer to check all of the robots, starting with robot 0.<br /><br />Now let's say you're not using 30 robots. You're using a random number of robots, between 25 and 35. As the programmer, you can't handle that with explicit variables. With that number changing during every execution, you don't know how many variables to make. You can, however, tell the computer, during every execution, to create that random number of robots and put them into the list.<br /><br />All software, web pages included, work with lots of information. Much of the time, your program will have to be able to house that information on the fly. It's your job to create that housing and an array is your first best way to do that.",slides:[{text:"For this constructions, all we're going to do is generate some arrays, and output them to the screen.<br /><br />Use this as your basic HTML setup.",image:"step1.PNG"},{text:"Here's a basic array.  The syntax for creating an array is a list of items inside square brackets ([]).  The array itself is a single object.  Each item inside of the array is also a single object.<br /><br />At the end of the function we write the whole list to the div tag.  When you output an array in this manner, it will show it as a comma delimited list.  It's important to note that our array is a list of strings so they display nicely.  Arrays, however, can be made up of any types of variables including numbers, booleans, and other objects.<br /><br />Try this.",image:"step2.PNG"},{text:"You can also use the square brackets to access specific items in the array.  When you access an item with the square brackets, you are treating it as a single variable, just like any other variable.<br /><br />This means you can display it by itself.<br /><br />Try this.",image:"step3.PNG"},{text:"It also means you can change the value.<br /><br />Try this.",image:"step4.PNG"},{text:"And add items.<br /><br />The index referenced is 5.  The original list has 5 items (0 - 4), so we're just creating a brand new index by accessing the next one available.<br /><br />Try this.",image:"step5.PNG"},{text:"Enough of the preliminaries.<br /><br />Let's to create a list of random numbers.  We don't know how many numbers.  That'll be random, too.<br /><br />The first thing we need, though is an empty array.  An empty array can be created by simply setting your array variable to empty brackets.<br /><br />Oh, and we're going to need utilities, too, in order to generate the random number.  If you have that from the last level, you should include it.",image:"step6.PNG"},{text:"Next, we'll figure out how many numbers are going into the list.<br /><br />Let's say we want between 50 and 100 numbers in the list.  We can use out getRandomInteger() function to figure that number out and store it in a local variable.",image:"step7.PNG"},{text:"Our next step is to fill the list with numbers.  We want to create X numbers, where X = randomLength.  That means we're going to go through motions of creating a random number X times.<br /><br />That sounds like a loop.<br /><br />Since it's a loop that will iterate through a known number of cycles, we can use a for loop.<br /><br />It's important to note that putting the random number into a variable is essential in this case.  If we simply called getRandomInteger() in the for loop, it would generate a new number each iteration.",image:"step8.PNG"},{text:"Remember that we could add to the list by indexing the next available index.  Well, when you're looping through an unknown number of indicies, you need an abstract way to represent the last index.<br /><br />The length property of an array is that representation.  It tells you how many items are in the array and also tells you what the next index is.<br /><br />Remember that if you have 5 items in your array, they are indexed from 0 to 4.",image:"step9.PNG"},{text:"We can display the array the same way we did in the original example, just write it to the <div> tag.<br /><br />That's pretty limiting, though.  I think I'd prefer something that looks like this:<br /><br />0: 3<br />1: -8<br />2: 6<br /><br />And so on.",image:"step10.PNG"},{text:"In order to accomplish this, we need to think about displaying the list one item at a time instead of just displaying the whole list.<br /><br />First, let's empty out the display.<br /><br />Then we start thinking about the display.  If we're going to go item by item, what do we need?",image:"step11.PNG"},{text:"You guessed it!  A loop.<br /><br />We can start at 0, the first index, and continue through the loop WHILE i is less than the length of the list.  That will take us all the way through and including the last index.<br /><br />That's every item.",image:"step12.PNG"},{text:"The rest is string building.<br /><br />The first piece of the string is the index.  That gives us the number of the number, if you know what I mean.<br /><br />The second piece is the colon.  That's just basic character output.  Always think of your user.<br /><br />Then comes the list item.  We access it with the square brackets just the way we did in the original example, but the index itself is a variable.  That's why the loop works so well.  With i changing with every new iteration of the loop, we're accessing a different index each time.<br /><br />The last piece is just the static br that sends the output to the next line.<br /><br />This is good to go now.<br /><br />When you're done here, check out the <a href = 'lessons/arrays/Objects in Memory.pptx'>Objects In Memory Powerpoint</a>.  Instead of just looking at the slides, make sure to run the presentation as there are some animations that help clarify its meaning.<br /><br />After you're done with that, have a look at the Flipbook in the samples section.",image:"step13.PNG"}]}, 
{title:"Array Manipulation", objective:"Objective: To think of an array as an object and learn to use some of its cornerstone functions.", description:"An array is an object.  As such, it has its own properties and functions.<br /><br />Many of those functions are similar to the functions used by strings.  If you think about it, that should make sense.  After all, what is a string but an array of characters?<hr />",slides:[{text:"We're going to create a simple list of foods that the user can manipulate through the use of some controls on the page.<br /><br />The program will jump around a bit between the HTML, the CSS, and Javascript files so keep on your toes.<br /><br />First things first.  Let's set up a rudimentary display using our columns.css.  There are a handful of things we want for the look and feel of this list, so we'll create a foods.css as well.",image:"step1.PNG"},{text:"Create a CSS file and call it foods.css.<br /><br />We're just using some basic text formatting for the body, the buttons, and header tag.<br /><br />This will be enough for now.  Feel free to go crazy with design if you want to practice when we're done.",image:"step2.PNG"},{text:"Switch back to index.html.<br /><br />Here's the HTML code.  What you can't see is that there's a space after each closing button tag.  Since a button is an inline element, they will all appear on the same line despite the way the code is arranged.  If you want them to be spaced out a bit, you need to insert that space.  One space will be recognized by the browser.  More than that will require the &amp;nbsp; HTML entity or some CSS work.<br /><br />Load it up and see how it looks. ",image:"step3.PNG"},{text:"Start with identifying our HTML Element objects.  Our output box (outBox) will show the list of foods.<br /><br />The foodSelectionBox is the text box.  It will tell the page which food we want to work with when we click on the buttons.<br /><br />The other 2 boxes output information based on which buttons are clicked.<br /><br />The functions we want from this page include having it tell us how many of each food there is in the list and showing us where those foods appear.",image:"step4.PNG"},{text:"Now let's get into it.  We need to initialize the back end variables.  The food list is populated with a handful of food items.<br /><br />There is a list to show us all of the duplicated indices and then a variable to show us how many duplicates there are of the selected food.<br /><br />Let's jump down to the display.",image:"step5.PNG"},{text:"The key to our display is showing the list of foods.<br /><br />The first thing we do is to initialize the innerHTML of the outBox to the first item in the foodList.<br /><br />After that, we can loop through the remaining items (starting with index 1) and output them.<br /><br />The duplicatesBox and countBox will show nothing right now because we haven't done anything.",image:"step6.PNG"},{text:"Whichever button we click will respond based on the information in the foodSelectionBox.  This function adds a food to the list.<br /><br />The push() function belongs to arrays.  It automatically adds the item passed as the argument to the list.  It's a bit neater than figuring out the next available index.<br /><br />The value of the foodSelectionBox is whatever's typed in.<br /><br />Try it, but remember that only adding the foods will work.  Get a handle on that before moving on.",image:"step7.PNG"},{text:"Arrays have a lot of useful functions, but sometimes we need to write our own functions that serve our individual purposes.<br /><br />One of the things we want to do is to get a list of the indices where a particular food exists.  The other is to get a count of the same items in an array.<br /><br />Since arrays don't have these 2 functions, let's create a javascript file called 'arrays.js' and put these functions into it.<br /><br />Don't forget to import your new javascript file into your index.html using the script tag.",image:"step8.PNG"},{text:"This is a utility function.  In our program, we're going to use it to search the array for whatever is typed in the food textbox and count the number of times it finds it in the list.<br /><br />The reason it's in here, though, and not with the rest of our code is because this function will be useful with any array at all.  Counting the number of duplicates in a list may be something that you want to do in other programs as well.",image:"step9.PNG"},{text:"This one is going to show the user where, in the list, the selected food appears.<br /><br />Again, generating a list of indices for a certain item or type of item can come in handy in other programs.",image:"step10.PNG"},{text:"This function handles a simple iterate and compare kind of search.  We're starting with a base count of 0 (stored in itmCount).  We then iterate through the array, checking each item against the variable 'itm'.  If they match, we add 1 to itmCount.<br /><br />At the end of the function, we return itmCount.<br /><br />Take a minute or two to make sure you understand this function.",image:"step11.PNG"},{text:"The indexesOf function works in a similar way, but instead of a simple count, we are building a list of the indices at which we find the element.<br /><br />Once again, we're using the push() function to add to the temporary idxList, which we will ultimately return.<br /><br />On a side note, if you wanted to add an item to the front of the array, you would use the unshift() function.",image:"step12.PNG"},{text:"Let's make use of the functions we just created.  The getDupeList() function's job is to make a list containing every index where it finds the food item from the text box.<br /><br />Remember that this is case sensitive.<br /><br />To get that list, we simply call our indexesOf() function and pass in the foodList array and the text from the text box.<br /><br />That function does its thing and returns the list which we conveniently store in our dupesList object.",image:"step13.PNG"},{text:"The getDupeCount() function works similarly to the getDupeList() function.  It calls countDuplicates(), passing in the foodList array and the text from the text box.  It gives us back a number, which we store in our dupesCount variable.<br /><br />That's it.  Go ahead and try it.<br /><br />When you're done playing with it, take some time to review the code.  See how it's all done in pieces and the pieces fit together.<br /><br />When you're done with that, check out Hangman from the samples section.",image:"step14.PNG"}]},
{title:"Split and Splice", objective:"Objective: The get a glimpse at strings' and arrays' most important functions.", description:"A delimited string is a string that contains different pieces of information, each separated by some character or series of characters called a delimiter.  It's an easy and powerful way to store data, but you need a way to break up that delimited string and get to the individual pieces.<br /><br />That's where the split() function comes in.  It breaks up a delimited string and returns an array of all of the different pieces of data.<br /><br />An array is your first best method of keeping track of multiple pieces of data in your program.  But arrays are fluid things, with items being added and removed all of the time.  It's easy when you're working with the ends of the array, but sometimes you need to do that work in the middle.<br /><br />That's where the splice() function comes in.<br /><br />The splice() function is a multi-purpose tool that lets you pull chunks of data from anywhere in the array and add back chunks of data all at once.",slides:[{text:"Alchemy is a little game where you start with the basic elements (air, earth, fire, and water) and try to combine them to make other things.  You can also combine the things you make to make more things, hinting a possibly infinite list of combinations.  It was all the rage in 2011.<br /><br />Today, we're going to recreate in on a web page.  Here is the HTML for the body.",image:"step1.PNG"},{text:"You may have noticed the <i>class</i> attribute in the div tag.  You'll learn more about that in Level 5, but the general idea is that a class identifies an element or a group of elements that are going to be styled in a certain way.<br /><br />You may have also noticed that the input tag in the form is of type <i>number</i>.  There are a lot of different types for input tags.  A number box is the same as a text box, except it only accepts numeric values.",image:"step2.PNG"},{text:"Create a file called 'alchemy.js' and put this code into it.  Remember to import the code into your html file using the script tag.<br /><br />The Alchemy game has a database of combinations and it responds to the user combinations by checking to see if they're legitimate.  We don't have a database, but we can use some Javascript strings to store our information.  Our game has just a few combinations.<br /><br />The elements of the game are defined as 'organisms'.  Each organism is stored as a string in the format, 'name;parent1;parent2', where the name is the name of the organism and the 2 parents are the organism combined to make it.<br /><br />Structuring the string in this way is essential.  Otherwise, we wouldn't be able to break it up into its parts.<br /><br />We've also put all of our organism strings into a single constant array.",image:"step3.PNG"},{text:"These other constants will be used throughout the program.<br /><br />The offset will help some of our code that searches through the list of organisms.  Since the first 4 organisms are the originals, they don't have parents.<br /><br />The NAME, PARENT_1, and PARENT_2 constants are just names for indices.  We'll be using split to break up an organism string into an organism array.  The first item in the array will be the name of the organism.  The second item will be a parent and the third item will be the other parent.",image:"step4.PNG"},{text:"Since all of our organisms are packed into individual strings, we'll need a way to extract that information.  We can do it on the fly, as we need it, but since it's something we're likely to do over and over again, creating functions for it is the best way to go.",image:"step5.PNG"},{text:"The split function breaks a string up around another string and stores the pieces in an array.<br /><br />For this function, we're using the semi-colon as our delimiter (or separator).<br /><br />If you remember, our organism string is in the format 'name;parent1;parent2'.  If we split this up around a sem-colon, we get an array that looks like this:<br /><br />organism[0] => name<br />organism[1] => parent1<br />organism[2] => parent2<br /><br />It doesn't matter that we're overwriting the parameter.  Once we split the original string, we don't need it anymore.",image:"step6.PNG"},{text:"We can then grab the name from the array and store it in a local variable.<br /><br />Remember those constants that were meant to be indicies?  Remember that the value of NAME is 0?  This helps make my code easier to understand.  Also, if I happen to shift the data later on, I can just change the values of the constants rather than having to search the code for the numbers.",image:"step7.PNG"},{text:"Finally, we just return the name and that's it.  The function has broken up the string, extracted the name, and returned it.  Now we can call this function whenever we need the name of an organism and not have to worry about doing all of this work.",image:"step5.PNG"},{text:"Of course, there's really no need for this to be 3 lines of code.<br /><br />Since split returns an array, we can treat it like an array and access an index right then and there.  Then we can just return it directly without extra lines or variables.<br /><br />We will need a function for each of the pieces of data in an organism.",image:"step8.PNG"},{text:"Or do we?<br /><br />In looking at the 3 functions, did you notice that they're identical except for the index?  That means that, if we can convert that index to a variable, we can create a single function that will work for all 3 possible values.<br /><br />Making it a parameter does just that.",image:"step9.PNG"},{text:"The way I see it, we're going to need a couple of more of these utility functions for our program.  The good thing about functions like this is that they're just information gatherers.  That means that they'll come in handy when you're program's small, but, more importantly, will be even more useful as your program grows.<br /><br />This one determines whether or not 2 organisms are the parents of a 3rd organism.",image:"step10.PNG"},{text:"The first thing we do is to save all of our revelant information into local variables.  Note that the parameters are receiving full organism strings and calling the utility function to break them up.<br /><br />Is setting up locals necessary?<br /><br />Absolutely not.  Sometimes it helps you to see more of what's going on, but other times, you just don't need the variables.",image:"step11.PNG"},{text:"The next thing we check is whether or not parent1 is, in fact, a parent of the organism.  We do a simple comparison of the organism's actual parents with the potential parents that were passed into the function.<br /><br />In this program, the order doesn't count.  Earth and Water make mud.  Water and Earth also make mud.",image:"step12.PNG"},{text:"If the first parent is a match, we have to check the second parent.<br /><br />Again, it doesn't matter which is which.  Unless our data is corrupt, there won't be any duplicates.<br /><br />If the parents match, then we can return true.  Otherwise, this'll drop down out the conditionals and have no choice but to return false.<br /><br /><i>As an aside, if you wanted to have duplicates (say Air and Air make Oxygen), this would still work.  Because of the OR conditions, both conditionals would still be true and the function would return true.</i>",image:"step13.PNG"},{text:"In case you'd like to see what this looks like without any local variables, this is it.<br /><br />All of the conditionals are built into a single condition using a combination of ANDs and ORs.  Ultimately, the whole expression evaluates to either <b><i>true</i></b> or <b><i>false</i></b> and is returned by the function.",image:"step14.PNG"},{text:"Here's another utility function.  This one finds an organism in the list using the name as the search information.  The name comes into the function through the parameter.  It will seach through the list of all the organisms until it finds one with a matching name.  Then it will return that full organism string.",image:"step15.PNG"},{text:"You may have noticed that the for loop looks a little different than what we've been using.  This is just a little shorthand that tells the browser to search the whole array and use <b>i</b> as the index.",image:"step16.PNG"},{text:"Our last utility function takes in 2 organisms and finds out which new organism they make.<br /><br />It takes in 2 full organism strings as parameters.  Then it searches through our list of organisms to see if any of them are created by those 2 parents.  Once it finds something, it returns it.  If it makes it through the whole loop without finding anything, it returns our NONE constant.<br /><br />In this function, we're already using one of our other utility functions.  Using the areParents() function saves us a lot of time and energy.<br /><br />Good thing we have that.",image:"step17.PNG"},{text:"It's time to get this thing working.<br /><br />In initialize(), we'll do some initializing, starting with the necessary objects for the HTML elements.<br /><br />Below that, we have our back end variables.  There's a list for the user's current stock of organisms.  This is populated with the 4 primary organisms (air, earth, fire, water).<br /><br />The firstSelection and secondSelection variables will hold the organisms the user has selected when trying to make something new.<br /><br /><i>There is a link to a CSS file that we haven't created yet.  We'll get there.</i>",image:"step18.PNG"},{text:"The display() function will take what's in the user's list and display all of the names.  By outputting the first item in the list manually, we can set up some formatting within the loop.<br /><br />This is really just basic string building.  We are, however, getting the display information from the utility function, getOrganismData().<br /><br />You can finally run this if you like.  It won't work yet, but it will show the basic list on screen.",image:"step19.PNG"},{text:"In order for this to work, the user needs to be able to select 2 organisms.  The computer needs to know when to start looking for a new one (ie, when the user has selected 2 and not just 1).<br /><br />The user will make a choice by typing a number into the box.  That number will match an organism on the list.  The function takes that number and subtracts 1, because the list is shown with no 0.<br /><br />",image:"step20.PNG"},{text:"The next piece is just a little bit of error checking.  This code checks to make sure that the index is actually in the array.  If not, it returns nothing, basically just ending the function.<br /><br />Error checking is an important part of making your programs fool proof.  Especially when you're reliant on user input.  If a function receives the wrong data, things can go horribly wrong.",image:"step21.PNG"},{text:"The way this is programmed, when the user enters a 2nd element, the computer will search for a match and then immediately clear both selections and wait for a new entry.<br /><br />If there is no selection or there are already 2 selections, then the computer knows that this is the first selection.  It will store the selected organism in the firstSelection variable and blank out the secondSelection variable.<br /><br />Otherwise, it will fill the secondSelection variable and try to add the new organism.<br /><br />At the end of the function, it empties the text box and displays.",image:"step22.PNG"},{text:"Adding the organism to the user's list requires the program to make sure that the selections represent a valid combination.  This function does that by calling the findCombo() utility function that we wrote.  If it comes back as something other than NONE, we can add it to the user's list.<br /><br />Did you notice that it also checks to make sure that the organism is not already in the list?",image:"step23.PNG"},{text:"The last piece of the back end is the deleteOrganism() function.  This one pulls an organism out of the list.  I don't know why a user would want to do such a thing, but it's there just in case.<br /><br />After checking the index entered into the number box, it uses the array's splice() function to remove the item.<br /><br />Splice is an extremely powerful function.  It can remove one or more items from an array and it can add one or more items to the same array at the same time.  Unlike some other array functions, splice <i>does</i> modify the original array.<br /><br />Splice has 2+ parameters.<br /><br />The first parameter receives an index that tells splice where to begin its work.<br /><br />The second parameter tells splice how many items to delete.  This number can be zero.<br /><br />After that, you can list any number of objects or values and splice will put them into the array, starting at the index provided.<br /><br />You can run this now.",image:"step24.PNG"},{text:"Let's write that alchemy.css file and dress this thing up a bit.<br /><br />Download the <a href = 'lessons/split and splice/potion.PNG'>Potion Image</a> and add that to your project.  You can see in the code that it's setup to have an 'images' folder for it.  If you've arranged your directory structure differently, you'll need to make the necessary adjustment.<br /><br />You may have worked with a lot of this before, but...<br /><br />background-image is the image<br /><br />backround-repeat determines whether or not the image will be on screen more than once.<br //><br />background-size determines the size of the image<br /><br />background-position tells the browser where to put it<br /><br />background-attachment tells the browser how to treat it.  'fixed' means that it won't move even if the screen scrolls.<br /><br />Have a look.",image:"step25.PNG"},{text:"This code handles the title of the game.  It boxes out the title and dreses it up.<br /><br />You may have noticed the 'h1 span' designation.  The space indicates that the page should style al spans that are children of h1s in this way.  You'll learn more about that in level 5.<br /><br />The box-shadow is also new.  It uses all of those values to create a shadowing effect for just about any element.  The values are x-offset, y-offset, size, spread, and color.  The spread can give the shadow a more diffuse or blurry look.<br /><br />Try it and see how it looks.",image:"step26.PNG"},{text:"This next bit of code handles most of the text and the placement of the buttons.<br /><br />As a block element, the form was pushing the buttons to the next line.  By changing the display property to 'inline', we've made it so that the form is a standard inline element.<br /><br />Try it now.",image:"step27.PNG"},{text:"Remember that 'class' attribute?  Remember that we said it was for CSS? <br /><br />The dot operator in CSS indicates that the browser should look for a specific class before styling.  Unlike an id, a class can appear many times in many different tags.  Any tag that has that class will be styled as written.<br /><br />That's it!  This project is finished.  It's time to choose a Level 4 project!",image:"step28.PNG"}]}],
    samples: [{title:"The Dillz", lesson:"Advanced Strings", text:"The great explorer, Garth Garretson, has discovered a new tribe of people in the Amazon Jungle.  They call themselves the Dillz.  At first, he had a lot of trouble understanding them until he realized that their language is just a form of English with the letters <i>illz</i> inserted at certain points.  Now, armed with that information, he can translate their writings as well as communicate directly with them.<br /><br />Create a page that can translate some text from Dillz to English and English to Dillz.  The Dillz insert the letters <i>illz</i> before every vowel or vowel blend in every word so that the word <i>baby</i> would translate to <i>billzaby</i> and the word <i>about</i> would translate to <i>illzabillzout.</i><br /><br />So that Garth Garretson can translate quickly, he will be typing phrases into a textbox and reading the output on screen.  The program will know whether the phrase is in English or Dillz and translate accordingly (there is no English word with the letter sequence <i>illz</i>).<br /><br />The Dillz do not consider y a vowel under any circumstances.  They also do not consider an e at the end of a word to be a vowel."}, {title:"Objects in Memory", lesson:"Arrays", text:"This Powerpoint presentation outlines how objects differ from primitive variables (like numbers) and the way that your system's memory keeps track of them."}, {title:"Flipbook", lesson:"Arrays", text:"This page simulates an old style flipbook, which was always meant to show how animation is done.  Using a single button, the user can navigate through a series of images showing a forwards and backwards animation."}, {title:"Hangman", lesson:"Advanced Strings and Array Manipulation", text:"It's Hangman!  You know how to play hangman, right?  You guess the letters and solve the puzzle.  Too many wrong guesses and it's game over in a bad way."}],
    faq: [{question:"Since everything is a string, should I just make everything a string?",answer:"No. You can't perform arithmetic operations on strings. If you're constantly converting, that's extra work for the processor. One of the hardest things to learn as a new programmer is how to represent your information as variables. A lot of it is abstract. If you look for a magic solution, like make everything a string, you'll find it very difficult to program around the situations that don't fit your mold."}, {question:"Why doesn't toUpperCase() work?",answer:"Strings have many functions that alter, but don't alter the string. The best examples of these are toUpperCase() and toLowerCase(). These functions claim to convert the string to all caps or all lowercase letters. In fact, inside of these functions, a temporary duplicate string is created, altered, and returned, leaving the original string intact. If you want to alter your original string, you would set it equal to the function call.<br /><br />myStr = myStr.toUpperCase();"}, {question:"Is a string an array?",answer:"Yes and no.  A string is constructed similarly to an array.  In fact, early langages didn't have strings.  If you wanted one, you had to build an arary of characters."}, {question:"Can I access the characters in a string using square brackets?",answer:"Yes, you can, but it doesn't behave the same way an array does.  In Javascript, you can read a character from a string using the brackets, but can't overwrite it.  So, if I put str[3] in some div somewhere, it'll show you the 4th character of that string.  If I try to assign a new character to str[3], it won't work."}, {question:"How does the sort() function work?",answer:"The sort() function, among  others that belong to arrays, may rely on another function to tell it how to work.  In Javascript, functions are objects and their code can be executed with the purpose of informing another piece of code how or when to work."}, {question:"Why doesn't the reverse() function work?",answer:"The reverse() function works.  As with many string functions, arrays have functions that create a temporary duplicate of the array, alter the duplicate, and return it.  This a safe way to handle these kinds of tasks because it leaves the changing of the original array up to the programmer."}],
    projects: [{title:"Bug Splat", text:"Your home has become infested with dangerous alien bugs.  Sadly, all attempts to negotiate with the invaders have failed.  You are left with no alternative but to begin splatting.<br /><br />The user will splat 15 bugs by clicking on them while the bugs make comments to try and dissuade him or her.<br /><br />"}, {title:"The Crossing", text:"Three humans and three of the deadly blomfargles are trapped on one side of a huge precipice.  They have a hover car, which can carry 2 of them across at a time, and have agreed to work together to get everyone across.  The trouble is, if the blomfargles ever outnumber the humans on either side, they will eat them.  Can the user get all 6 across the precipice without letting the blomfargles eat the humans?"}, {title:"Grocery List", text:"Everyone needs to go grocery shopping.  And when you go grocery shopping, you need a list.  wouldn't it be great if there was an online option?  Of course it would!  The company of Shop Lift Up, Inc. wants you to write and design their grocery list web based utility.  Broke and in need of a job, you've accepted."}, {title:"Picture Puzzle", text:"Everyone likes doing a puzzle.  Your page will allow users to mix up the pieces of a puzzle and then click them back into place."}, {title:"Two Layer Tic Tac Toe", text:"Tic Tac Toe is the game where you have to get your X's and O's 3 in a row.  It's the game that usually ends in a tie, but what happens if you need to place a letter twice in order to actually capture the space?<br /><br />This version of Tic Tac Toe plays mechanically like regular Tic Tac Toe.  One player is X and the other is O.  Turn by turn, each player puts his or her letter into one of the squares on the 3X3 grid.  If there are 3 in a row (vertically, horizontally, or diagonally) that player is the winner.<br /><br />Two Layer Tic Tac Toe differs in that players can take spaces away from one another.  A space can only be locked if you take it twice.  For example, if you put your X on the center square, the other player can place his or her O on the center square later and take it away from you.  If you place a second X on the center square before your opponent takes it away, you've claimed it for good.<br /><br />Because of the layered nature of the game, there are a couple of new rules.<br /><br />If there is a letter on the space, whether once or twice, the space is considered held by that player.  A player can win the game with connected single-layer captures.<br /><br />A player may not move on the same space his or her opponent took on the previous turn.  For example, if I take the center square, you cannot move onto the center square on your very next turn.  You can only do it on a later turn."}]
};