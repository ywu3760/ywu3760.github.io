const PAGE_DATA = {
    level: "Level 1",
    title: "Foundations of HTML and JavaScript",
    lessons: [{
            title: "The Anatomy of a Web Page",
            objective: "Make a simple HTML template that you can use to start all of your projects.",
            description: "Way back in the dark times, when the digital universe was akin to a world covered in primordial goo, there was still a structure to the bits and bytes that made up the code that made up the programs that people ran. Though each language has its own structure, each language <i><b>has</b></i> a structure. When the World Wide Web was birthed, however, structure was the furthest thing from the minds of the code monkeys who sank their dirty paws into it. As the web has become the primary source of information for much of the world, more evolved monkeys have stepped in and standardized the structure so that new, little monkeys like us could play safely.<br /><br />The interesting thing about the structure of web programming is that, like the Pirate Code, it's more of a guideline than a rule. Since large companies have been investing millions of dollars into their web presence for years, the browsers that run our internet pages have to be able to sift through the messy script written by ancient monkeys as well as the clean stuff that you will create. So you can play safely just as long as you don't step off the narrow beam of code suspended ninety six stories above the chaos.",
            slides: [{text:"This is an HTML Template. You will start absolutely every project with this template and you will name this file 'index.html'.<br /><br />Let's take a look at all of the individual parts of the template!", image:"step1.PNG"},{text:"The DOCTYPE tells the browser that you are using properly formatted HTML. It must be the VERY FIRST thing on the page.", image:"step2.PNG"},{text:"It's so important that you use properly structured HTML. There's so much ugly code out there on the web from the dark ages of web programming. Follow the format you see in these lessons and try not to give in to your baser instincts.",image:"step2.PNG"},{text:"The green text is a comment. Comments are notes that you can take in your code. They're good for marking confusing bits or even 'commenting out' code that you don't want to run but don't want to lose.",image:"step3.PNG"},{text:"Those things you see between the angle brackets (<>) are called tags or HTML elements.",image:"step4.PNG"},{text:"Notice that all of the text is in lowercase letters. You'll see capitalized HTML online, but that's old code. Avoid it at all costs.",image:"step4.PNG"},{text:"An HTML element is defined by an opening tag and a closing tag. The closing tag is the one with the slash(/).",image:"step4.PNG"},{text:"The html tag is the head of the household. It represents you document.",image:"step4.PNG"},{text:"The head tag is a child of the html tag. Note that it is indented. Indenting is one of those things that helps define properly formatted code.<br /><br />The browser doesn't care whether or not you indent.<br /><br />Your teacher does, though.",image:"step5.PNG"},{text:"You will use the head tag as a container for 'back end code'. Back end code is the code that runs your page.",image:"step5.PNG"},{text:"The body tag is also a child of the html tag. Notice how it's also indented and its margin aligns with the head tag.<br /><br />That's because they're siblings. Yes. Siblings. Same parent.",image:"step6.PNG"},{text:"The body tag is used as a container for all of your front end code. The front end is the display and user interface.",image:"step6.PNG"},{text:"These 3 tags are children of the head and, therefore, grandchildren of the html tag. They are also siblings to each other.",image:"step7.PNG"},{text:"When you build an HTML page, defining the parent/child/sibling relationships is really important. The whole structure of your page is dependent on it.",image:"step7.PNG"},{text:"You can put text in between the opening and closing title tags. This text will appear in the tab in the browser window.",image:"step8.PNG"},{text:"The style tag is used for Cascading Style Sheets code or CSS for short. CSS is used to add formatting to your page like colors and fonts and positioning.<br /><br />ALL styling is handled by CSS. There are some old HTML tags that will style your cold but the vast majority of them are deprecated (obsolete). You will still see them when you go hunting for code online, but your best bet is to avoid them.",image:"step9.PNG"},{text:"Finally, you have the script tag. This is where all the Javascript goes.<br /><br />Javascript is a language that lends power to your pages.",image:"step10.PNG"}]
        },
        {
            title: "HTML Structure",
            objective: "Get a grip on the general structure of an HTML document.",
            description: "HTML tags are designed to give the page a certain look and feel. Back in the old days, HTML did a whole lot of looking and feeling, but most of that's been ported over to CSS. Since we're not using CSS in Level 1, knowing how to use HTML to create a general layout is essential to the health and well being of your page.",
            slides: [{text:"Break open a template and add 'Hello World' to the body. Make sure to make a new folder and a new copy of your template.",image:"step1.PNG"}, {text:"Now run this in the browser.<br /><br />You can do that through the Run menu in your editor or you can just go to the file in My Computer and double click it.",image:"step1.PNG"}, {text:"Now try this.<br /><br />How does the appearance of the code differ from the output in the browser?",image:"step2.PNG"}, {text:"The browser doesn't react to what's called 'white space'. That's anything empty in your code beyond a single space. You could add 100 spaces and new lines into your code and the browser will just ignore them.",image:"step2.PNG"}, {text:"Now try this!",image:"step3.PNG"}, {text:"That little tag after Hello World is a line break tag. Notice anything different about it?<br /><br />It's a self closing tag.<br /><br />That means it does something, in this case goes to the next line in the browser, and that's it. Nothing can go inside because there's no opening and closing.",image:"step4.PNG"}, {text:"There are other ways to organize your text.<br /><br />The p tag is a paragraph. It sets up a section of screen for whatever text is inside of it. Try it.",image:"step5.PNG"}, {text:"The paragraph tag is extremely useful, but isn't the only sectioning tag.<br /><br />Two others are div and span.<br /><br />Try this.",image:"step6.PNG"}, {text:"Notice that there is a new line at the end of each div and no new line after the span tags. This is because of the way HTML is programmed to display them.<br /><br />divs and ps are <i><b>block</b></i> elements. That means they take up entire lines of the screen no matter how much content is inside of them.<br /><br />Spans are <i><b>inline</b></i> elements. That means that they are only as wide as their content.<br /><br />Remember those terms, inline and block. They come up frequently.",image:"step7.PNG"}, {text:"Heading tags are great for making, well...headings. There are 6 of them h1 through h6 and each one displays the text differently.<br /><br />Are these block or inline tags? I'll never tell.",image:"step8.PNG"}, {text:"As you work with more and more tags, the parent/child or ancestor/descendant relationship becomes more and more complex.<br /><br />One of the things you must remember is that building tags works on a <b><i>first in, last out</i></b> system. That means that the first tag you open <b><i>must</i></b> be the last tag you close.",image:"step9.PNG"}, {text:"Note how the b (bold tag) and i (italic tag) are positioned. If the b tag were closed before the i tag, the interpreter (your browser) wouldn't know which element was the parent and which was the child. As you become more skilled and write more complex code, this kind of mistake will cause untold catastrophe!",image:"step10.PNG"}, {text:"Another important piece is the indentation. See in the code how the different elements are indented inside of their parents? Again, the browser doesn't care, but this makes code much easier for humans to read and understand. Formatting and organizing your code is an important part of being a human programmer. In some cases, like with the spans inside of the divs, no new line and no indentation is necessary. Though there is a common thread among programming styles, some of it will be up to you as you develop.",image:"step9.PNG"}, {text:"What if I wanted to have a few extra spaces?<br /><br />What if I wanted to put the text '&lt;div&gt;' inside of a span?<br /><br />The browser would see your '&lt;div&gt;' text as an actual div and any extra spaces would be ignored as white space.",image:"step9.PNG"}, {text:"That's why we have HTML entities.<br /><br />All HTML entities begin with an ampersand (&) and end with a semi-colon (;). In between you'll find a mnemonic (like gt for greater than sign or lt for less than sign) or a number in the form of #xxxx.<br /><br />There are a lot of characters in the digital world and each one has a value on something called the Unicode chart (look it up!). Those character values go into the entity. Try this code and then check out the 'Children's Story' sample program.",image:"step11.PNG"}]
        },
        {
            title: "Scripting",
            objective: "Get comfortable with some basic Javascript.",
            description: "So....scripting. More importantly, Javascript. That's the language of choice for scripting web pages. Why do we need it, you ask? Because, without the script, your page would have no way to interact with your user. You could put nice static text and even images and videos on your page, but the person on the other side of the screen wouldn't be able to do anything but sit and watch...and maybe drool.<br /><br />Make friends with the semi-colon. It's punctuation for Javascript. Whenever you complete a statement, you put a semicolon at the end.<br /><br />Organization is another biggie. You'd be surprised just how easy it is to let the code write itself. Except, the code does a terrible job writing itself. Make sure you are in control of your code from top to bottom.<br /><br />You will have to debug your code. In fact, you should be resigned to the fact that you will spend way more time debugging than you will actually writing code in the first place.<br /><br />Make sure you know which parts of your code are supposed to execute and when. If you don't know why you put a piece of code where you put it, then it's a pretty safe bet that that piece of code is not doing what you thought it was supposed to do.",
            slides: [{text:"This is our first script. As with the HTML, the browser, acting as an interpreter, reads the code from top to bottom and executes what it sees.<br /><br />All Javascript code goes into the script tag. When the interpreter gets to the script tag, it stops looking for HTML code and starts looking for Javascript code.<br /><br />Try this.",image:"step1.PNG"}, {text:"It doesn't do anything, right? Well, that means this is a good opportunity to introduce you to the debugger.<br /><br />You can open the debugger on Chrome or IE using F12. For other browsers, you'll need to look it up.",image:"step2.PNG"}, {text:"The debugger is designed to give you all of the information you need while figuring out what's wrong with your program.<br /><br />Right now, just look at the 2 highlighted words.<br /><br />Along the top, there are different tools. The Sources tool allows you to actually look at your code. It also gives you access to the Console screen (also available as its own tool), which shows you your 'Hello World'",image:"step3.PNG"}, {text:"Here is your list of files. If you were to double click on that, it would open up your file in the code window. Then you could properly debug it, which is something you don't need to do right now.",image:"step4.PNG"}, {text:"Let's have another look at the code. What's happening in this code?<br /><br />Look at the line and really think about it for a minute before clicking the 'Next' button. There's a lot going on here.",image:"step1.PNG"}, {text:"At it's core, this line of code is a <b><i>function call</i></b>.<br /><br />A function is a piece of code that defines a task.<br /><br />When you call a function, you're telling the computer that you want it to perform that task.",image:"step5.PNG"}, {text:"When you call a function, you call it by name.<br /><br />The name of this function is <b><i>log</i></b>.<br /><br />That's important. The function name is not 'console.log'. It's just 'log'.",image:"step6.PNG"}, {text:"Some functions need external information in order to operate. This information is called an <b><i>argument</b></i>. The information that we're passing to log is a string (Hello World).<br /><br />Regardless of whether or not the function needs information, you always need parentheses in the function call.",image:"step7.PNG"}, {text:"Now it's time to tell you that console is an object. It represents, you guessed it, the console window that we looked at before. And 'log' is a function that belongs to that object. Which is why the message that we sent to log ended up in the console window.<br /><br />I told you there was a lot going on.",image:"step8.PNG"}, {text:"Don't worry if you can't wrap your head around this whole thing right now. Your job in the coming lessons will be to use these tools as they are presented to you. If you follow the constructions and check out some of the samples, it'll all become second nature to you.",image:"step1.PNG"}]
        },
        {
            title: "Basic Functions",
            objective: "Get used to writing your program as a series of tasks and not a series of lines.",
            description: "I don't want to bore you with the history of programming. Suffice to say that programming line by line really sucks. Programming with functions and objects is way better.<br /><br />Think about a robot that only knows how to turn left. How do you get it to make a right turn? Well, you tell it to turn left 3 times. That's 3 instructions every time you want the stupid thing to turn right. <b><i>But</i></b>, if you can just define 'Turn Right' as turning left 3 times, you've taught the robot to do something new.<br /><br />You've defined a function!",
            slides: [{text:"Remember this code?<br /><br />It doesn't do a whole lot, but it does it the moment you load your page.<br /><br />That's because of the interpreter. It reads the code top down and executes as it reads.<br /><br />But what if we didn't want our code to execute right away? What if we're saving it for a special occassion?",image:"step1.PNG"}, {text:"I would put it into a function.<br /><br />Try it now. Load the page, go to the console, and see if it says anything.",image:"step2.PNG"}, {text:"It doesn't.<br /><br />It doesn't because a function will not execute without a function call.",image:"step2.PNG"}, {text:"Before we dive into that function call business, let's look at the anatomy of a function.<br /><br />When you are creating or <b><i>defining</i></b> a function, you have to use the 'function' keyword. It tells the interpreter what you're doing.",image:"step3.PNG"}, {text:"Then you give it a name.<br /><br />Naming your functions is <b><i>REALLY</i></b> important. The name should represent what the function does.<br /><br />This function is called 'greet' because it greets the world.",image:"step4.PNG"}, {text:"Then there are the parentheses?<br /><br />Remember how our function call to log passed through a message? That message was in the parentheses and it's called an <b><i>argument</i></b>.<br /><br />When you define the function, you'll put something in the parentheses to receive that argument. That something is a special variable called a <b><i>parameter</i></b>.<br /><br />Let's worry about that another time.",image:"step4.PNG"}, {text:"The body of your function is enclosed in curly braces {}.<br /><br />The body is made up of all of the lines of code that define your task.",image:"step5.PNG"}, {text:"Remember that this code will not even execute without a function call.<br /><br />So here's my function call.",image:"step6.PNG"}, {text:"You'll notice that there's no 'console' attached to my function call. That's because my function doesn't belong to the console. It belongs to my page. Therefore, I don't need an object, like the console, to call it. I can just reference it by name.<br /><br />Try it now.",image:"step6.PNG"}, {text:"I know. It's stupid. Why put some code into a function and then call the function right after you write the function?<br /><br />You won't. Ever. This is just a demonstration of 2 very important coding conventions. Move on to the next lesson for something a bit more practical.",image:"step7.PNG"}]
        },
        {
            title: "Basic Events",
            objective: "To make things happen when you want them to happen.",
            description: "An event is basically anything that happens. When you wake up in the morning, that's an event. When you eat breakfast, that's an event. When you show up for your first period class on time, that's a <b><i>major</i></b> event. People can respond to events in automatic ways, ways that are practiced, and ways that are spontaneous. Your web page can also respond to events, but you have to program them to do so.<br /><br />An event driven program is one that waits for an event to happen. Once that event is triggered, the computer responds, kicking off a sequence of execution. Web pages are event driven. In fact, graphical operating systems are event driven. They respond to key presses and mouse clicks and all kinds of other digital stimuli. Coding a basic event into a web page is pretty easy. In fact, you've already done it.",
            slides: [{text:"Remember this code?<br /><br />This is the code that greeted the world through the console, but only after we put in the function call.<br /><br />What we really want, though, is for this code to execute when the page is loaded.<br /><br />The page loading is an <b><i>event</i></b>.",image:"step1.PNG"},{text:"onload is a basic event. It triggers when the web page is done loading. In order to understand the code, let's break it down.",image:"step2.PNG"},{text:"An attribute is something you can add to an HTML opening tag to give it some unique definition. onload is a special kind of attribute called an event attribute. By associating it with an HTML tag, it will respond to an event <b><i>on that tag</i></b><br /><br />So here, we are saying, 'when the body is done loading, trigger the event'.",image:"step3.PNG"},{text:"Every attribute has to be assigned a value. When you're dealing with an event attribute, that value is literally Javascript code.<br /><br />In this case, our code is a function call to greet.<br /><br />Why is it in quotes, you ask? Because all attribute values, regardless of the kind of information, needs to be in quotes.",image:"step4.PNG"},{text:"Let's make a new function called 'shout10', which logs out '10!'<br /><br />If you've been keeping up, you'll realize that this function will never execute because there's no function call?<br /><br />When do we want this to happen?<br /><br />Wouldn't it be so cool if we could trigger it with a button?",image:"step5.PNG"},{text:"Okay, you talked me into it. Here's a button.<br /><br />The button tag creates a simple button on your page. The text inside the opening and closing tag (also defined as the inner HTML) is what will appear on your button.<br /><br />Try it.",image:"step6.PNG"},{text:"Of course it didn't do anything. HTML tags by themselves are inert. If you want them to have any sort of functionality, you need to program that functionality with Javascript.<br /><br />Let's create an event for our button.",image:"step6.PNG"},{text:"The event for a button is 'onclick' because we want our buttons to respond to clicks, not loads. The value of our onclick attribute is the function call to 'shoutTen'.<br /><br />Try it now and see what happens.",image:"step7.PNG"},{text:"Every time you click that button, the page logs out '10!'.<br /><br />Could you write a whole countdown? Can you do it with a single button?<br /><br />Try to write it and then take a look at the 'Countdown' sample.",image:"step7.PNG"}]
        },
        {
            title: "Variables",
            objective: "Understand information and take control of information flow.",
            description: "You know what a variable is, right? Your equation has an x in it and you can figure out the value of x based on the rest of the equation. Simple, right? In computer programming, you, as the programmer, don't ever have to figure out what the value of your variable is.<br /><br />Okay, that's a lie.<br /><br />When you're debugging, you often times need to figure out the values of your variables in order to see if things are working properly.<br /><br />But, during coding, you don't need to know. When you make a variable, you are creating an object (there's that word again) that represents something. It can represent the number of bananas in a bunch or the name of your favorite stuffed toy or the bird that just landed on the fence outside. The reason it's a variable is because its value can change. If there are 6 bananas in the bunch and I take one and eat it, that means there are now only 5 bananas in the bunch. The variable still represents the same thing, but the value has changed.<br /><br />This concept of variable vs. value is extremely important. When you write a computer program, you need to figure out what pieces of information you'll need to keep track of during its execution. Whatever you decide you need, you make a variable for. If you're in the middle of the program and realize that you need to keep track of some unforeseen piece of information, you can make a variable for that, too.",
            slides: [{text:"num1 and num2 are variables. I've created them by giving them names and values. You can name a variable however you want, but it should have a name that represents the values it may hold.<br /><br />The equals sign (=) is actually the assignment operator. The following statements should be read as:<br /><br />The variable num1 is assigned a value of 3.<br /><br />The variable num2 is asssigned a value of 7.",image:"step1.PNG"},{text:"When dealing with the assignment operator, you must be very careful to maintain proper syntax. On the left of the assignment operator, the interpreter expects a single variable. It can be a new variable, just created, or some old variable that's getting a new value. But it MUST be a variable. Anything else will cause an error.<br /><br />On the right side, you must put a value. This value will be stored in the variable. In our example, we're using simple numbers. The truth is, anything that creates a value can be on the right side. We'll see more of that later.",image:"step1.PNG"},{text:"Next, we'll need functions to handle each of the operations.<br /><br />Put these 4 empty functions into your code. Each of these functions will perform an arithmetic operation on the 2 numbers and display the result.<br /><br />Now start thinking about what goes into those functions.",image:"step2.PNG"},{text:"The code that goes into this function has a few parts that we've never seen before so let's take them one at a time.",image:"step3.PNG"},{text:"The first thing is the var keyword. When we created num1 and num2, we didn't use it. When you make a variable <b><i>without</i></b> the var keyword, that variable is <b><i>global</i></b>, meaning it exists for the whole program.<br /><br />When you create a variable <b><i>with</i></b> the var keyword, that variable is <b><i>local</i></b>. A local variable exists <b><i>only</i></b> in the function in which it was created. This means, I can make as many variables named 'result' as I like and they'll all be different. The variables num1 and num2, however, are the same 2 variables wherever I use them.",image:"step4.PNG"},{text:"Instead of assigning a simple value to the result variable, we're assigning the result of an operation. The computer will calculate the sum of num1 and num2 and assign THAT value to result.<br /><br />There are 5 mathematical operators:<br /><br />+ is for addition<br />- is for subtraction<br />* is for multiplication<br />/ is for division<br />% is for modulus, which is an integer division that returns the remainder as its result.",image:"step5.PNG"},{text:"Our call to log doesn't pass in a string this time. Instead, we are sending through our variable as the argument. The log function will receive whatever <b><i>value</i></b> is in the result variable.",image:"step6.PNG"},{text:"Let's add a button so that we can add the two numbers and see the result in the console whenever we'd like.<br /><br />Try and finish off the rest of the program yourself.<br /><br />Before moving on, check out this Powerpoint on <a href = 'lessons/variables/Random Randomness.pptx'>Generating Random Numbers</a>.",image:"step7.PNG"}]
        },
        {
            title: "Elements As Objects",
            objective: "To understand the relationship between Javascript and HTML.",
            description: "This is the most important lesson in Level 1.<br /><br />Really<br /><br />If you have trouble understanding this, ask for help immediately.",
            slides: [{text:"Let's get started right away. Open up a new template and update so that it looks like this code.<br /><br />Pay careful attention to the development of this program. It doesn't do much, but the concepts are essential.<br /><br />Ultimately, we want the program to respond to the user clicking the button by changing the message inside the div.",image:"step1.PNG"},{text:"The first thing to do is add an id attribute to the div.<br /><br />You've seen an attribute that triggered an event (onload and onclick). This is a much simpler version of that concept. It's just a name and a value.<br /><br />The id attribute gives an HTML element a unique identity, the operative word being unique. You can name the element whatever you like, but you may not use that name for anything else in your program.",image:"step2.PNG"},{text:"Add the line of code shown to initialize().<br /><br />This line of code grabs hold of the div element from the HTML and stores it as a complex object in our outputDiv variable.<br /><br />Let's break this down.",image:"step3.PNG"},{text:"outputDiv is a variable.  It's just like any of the variables used in the last lesson.  It can hold any value, just like the variables from the last lesson.  And we are assigning it a value, just like we did with the variables in the last lesson.<br /><br />The value that's being assigned to it is what's very very different.",image:"step4.PNG"},{text:"This is you really using an object for the first time.  Get used to it. Objects are everywhere.  If you're not clear on this relationship, experiment with it.  Ask questions. Develop your understanding.",image:"step4.PNG"},{text:"Don't think of an object as code.  Think of it, literally, as an object.  You can hold it in your virtual hand and manipulate it in all kinds of ways.  Our divOut = document.getElementById('mydiv'); statement has a lot of layers, as do many Javascript statements.  Having the patience to identify and peel away those layers is going to make you a programmer.  Copying it from the internet and stuffing it into your code wherever you think it belongs is the wrong approach and you should squash that impulse here and now.",image:"step4.PNG"},{text:"Your clues to understanding this statement are:<br /><br />The assignment operator (=).<br />The dot (.).<br />The parentheses (()).",image:"step4.PNG"},{text:"Let's start with the assignment operator.  You learned that an assignment operator has something on the left and something on the right.  I want to reiterate that what goes on the left has to be a variable.<br /><br />It <b><i>has</i></b> to be.<br /><br />A variable.<br /><br />Nothing else.<br /><br />There are no exceptions.<br /><br />None.<br /><br />Not. Even. One.",image:"step4.PNG"},{text:"What goes on the left side of an assignment operator?",image:"step4.PNG"},{text:"That's right...a variable.",image:"step4.PNG"},{text:"The right side of the assignment operator has a value. Can you identify the parts of this 'value'?<br /><br />At its core, there's a function call. The function, 'getElementById' is being used to go out into the document and find an HTML element with an id attirbute that matches the argument (that's the string in the parentheses).<br /><br />What's it gonna find?",image:"step5.PNG"},{text:"We did the same thing with console.log.  The log function takes in a message as an argument.  The getElementById function takes in an id as an argument.  They're both strings so they're both the same type of value, but they have very different meanings because the functions do very different things.",image:"step5.PNG"},{text:"The log function belongs to the console object.  That's why the message is displayed in the console. The getElementById function belongs to the document object. That's why it searches the document for the element with the matching id.",image:"step5.PNG"},{text:"When it finds the element with the matching id it <b><i>returns</i></b> the whole HTML element.<br /><br />Think about that.<br /><br />The whole element.",image:"step5.PNG"},{text:"Create the clickResponse function and type in the code you see here.<br /><br />Let's break it down.",image:"step6.PNG"},{text:"Like we said, outputDiv is a variable. It's value is an object.<br /><br />Like console.<br /><br />Like document.",image:"step7.PNG"},{text:"An object is a complex virtual construct. It has its own properties (they come in the form of variables) and its own functions (they come in the form of functions, of course).",image:"step7.PNG"},{text:"innerHTML is a variable that belongs to every HTML element that has an opening and a closing tag. An HTML element <b><i>must</i></b> have an opening and a closing tag in order to have innerHTML.<br /><br />Like a div.<br /><br />Or a span.<br /><br />But not a br.<br /><br />Or an hr.",image:"step7.PNG"},{text:"Since every HTML object with an opening and a closing tag (like a div) has its own innerHTML, we can access that innerHTML with an variable that represents that HTML object (like outputDiv).",image:"step7.PNG"},{text:"You can assign a value to that property the same way that you would assign a value to any variable anywhere.",image:"step8.PNG"},{text:"Now bring it home by adding the onclick event to the button and calling our clickResponse function.<br /><br />Try it!<br /><br />Still don't get it? That's okay. Just keep going.",image:"step9.PNG"},{text:"All of the tags in your HTML page represent an object.<br /><br />The document itself is represented by the html tag.<br /><br />The document belongs to the window object, which is represented by your browser window.<br /><br />All of the other tags on your page belong to the document.",image:"step10.PNG"},{text:"A standard HTML tag has an opening and a closing.<br /><br />Both are surrounded by angle brackets (<>) and have the name of the tag inside.<br /><br />The closing tag begins with a '/'. Inside the opening tag can be any number of attributes and their values.  The values should always be in quotes.<br /><br />Anything between the two tags is part of that element's innerHTML.",image:"step11.PNG"},{text:"The id attribute can be assigned to any tag.<br /><br />Its purpose is to, you guessed it, identify the tag.<br /><br />The value of id should be unique to the page.  Don't give other ids that value.  Don't give other variables or functions that name.",image:"step12.PNG"},{text:"Objects are built out of properties (variables) and functions.<br /><br />You can reference a member property or function by using the dot (.) operator.<br /><br />Sometimes (often) objects have other objects as properties so you can access their properties and functions through a series of dots.",image:"step13.PNG"},{text:"getElementById() is a function that is a member of the document.<br /><br />getElementById() searches the document for an HTML whose id attribute has a value matching whatever's in the parentheses.<br /><br />When it finds the element it returns it as a Javascript object. In the example, we've assigned it to a variable.",image:"step14.PNG"},{text:"Now that we have an object representing our div, we can reference the innerHTML.<br /><br />In this case, we're changing the text, but you can do anything you want with it.",image:"step15.PNG"},{text:"This is a pretty cool video relating to this topic.<br /><br /><a target = '_blank' href = 'https://youtu.be/t90K6HExEJo'>The Next Ninja - JS & The DOM Tutorial #2</a><br /><br />I also recommend this powerpoint <a href = 'lessons/elements as objects/Elemental Elements.pptx'>Elemental Elements</a><br /><br />You should also check out the Up and Down program from the samples section.",image:"step15.PNG"}]
        },
        {
            title: "Conditionals",
            objective: "To understand how your program can generate pathways based on conditions.",
            description: "Remember logic? Truth tables and logic proofs?<br /><br />I know. It gives you tingles of joy up and down your spine just thinking about.<br /><br />Well, prepare to be excited because that wonderful stuff is the foundation for conditionals.<br /><br />If something is true, I will do this thing. If it's not true, I will not do this thing and I may do something else.",
            slides: [{text:"For this construction, we're going to work with the Up and Down sample. If you haven't yet looked at it, please do so.<br /><br />Shown is the HTML.  There are no changes from the original program so you can use that rather than spending time typing it in.",image:"step1.PNG"},{text:"And here's your Javascript.<br /><br />The first thing we're going to do with this program is prevent it from going into the negatives.  Before moving on to the next step, try and think about where we would ask the question, 'is this number negative?' and how we might handle that situation.",image:"step2.PNG"},{text:"The only time a number can possibly go negative is when you subtract from it. That means that our code to handle that situation needs to go into the subtractOne function.",image:"step3.PNG"},{text:"A conditional is a block of coded that is head by an <b><i>if</i></b>. The code in the parentheses is called a <b><i>condition</i></b> and its truth value determines what the program does next.",image:"step4.PNG"},{text:"The condition here tests to see whether or not myNumber is greater than 0. This is a logical comparison because it evaluates to either true or false.  Either myNumber <b><i>is</i></b> greater than 0. Or it <b><i>isn't</i></b>.",image:"step5.PNG"},{text:"There are 5 logical comparisons that are commonly used in conditionals:<br /><br />equals (==) determines whether or not 2 values are equal.<br /><br />greater than (>) determines whether or not the left value is greater than the right value.<br /><br />less than (<) determines whether or not the left value is less than the right value.<br /><br />greater than or equal to (<=) determines whether or not the left value is greater than or equal to the right value.<br /><br />less than or equal to (<=) determines whether or not the left value is less than or equal to the right value.",image:"step5.PNG"},{text:"As with a function, we use braces to determine which code belongs to the conditional. The code inside the braces will execute if the conditional evaluates to <b><i>true</i></b>. It will be entirely skipped if the conditional evaluates to <b><i>false</i></b>.<br /><br /><i>Pro Tip: If there is only 1 line of code associated with the conditional, you can omit the braces.</i>",image:"step6.PNG"},{text:"Try this now. You won't be able to get the number to go below 0.<br /><br />Once you understand this, let's move on. I want to make a button that turns negatives on and off. When active, the user will be able to take the number below 0. Otherwise, not.",image:"step3.PNG"},{text:"First add the button to the HTML.",image:"step7.PNG"},{text:"The onclick triggers a call to toggleNegatives().  We haven't written it yet, but it will be responsible for turning the negatives on and off.",image:"step8.PNG"},{text:"The button also has an id. We only give elements ids when we need to change them dynamically (while the program is running). That will happen here.<br /><br />Do you notice how the text of the button is 'Negatives are OFF'? That text will change when the user turns the negatives on.",image:"step9.PNG"},{text:"First go back to initialize().  This program is growing and it needs more parts.<br /><br />The wonderful thing about programming is that, if you need parts, you can just make parts.",image:"step10.PNG"},{text:"Here's the button.  Just like a div or a span, you can capture a button into an object variable.<br /><br />You can capture <b><i>any</i></b> HTML element into an object variable.",image:"step11.PNG"},{text:"This is the toggle.<br /><br />If you don't know what a toggle is, it's essentially an on/off switch.  Our toggle turns negative numbers on and off.<br /><br />Since there are only 2 possible positions for a toggle (on and off), we'll use a boolean (true and false) variable. It starts at false because negatives are off.",image:"step12.PNG"},{text:"And the moment you've been waiting for... The toggleNegatives() function!<br /><br />I know, I know, but please hold your applause until the end.<br /><br />The logic here is very straightforward. If the toggle is on, turn it off. If it's off, turn it on.",image:"step13.PNG"},{text:"This is a basic conditional with a basic condition. You could even argue that it's more basic than the earlier one because it uses straight booleans.<br /><br />So think about that.<br /><br />A condition itself evaluates to either true or false.<br /><br />Here, we're testing to see if the value of a variable is true.<br /><br />If the value is true, the condition is true.<br /><br />If the value is false, the condition is false.<br /><br />Take a moment. Reread that. There's no rush.",image:"step14.PNG"},{text:"Look at this change.<br /><br />The code is no longer doing a comparison.<br /><br />It doesn't have to.<br /><br />A boolean variable has a value that is true or false.<br /><br />A condition inside an if conditional needs to evaluate to either true or false.<br /><br />If negativesAllowed is true, then the condition is true. If negativesAllowed is false, then the condition is false.<br /><br />It's like they were meant for each other.",image:"step15.PNG"},{text:"Move on to the 'else'.<br /><br />You can attach an else to any if. The else must be attached to an if. You can't attach it to another else or any other thing in Javascript.",image:"step16.PNG"},{text:"The else clause essentially tells the program what to do when the if conditional is not true.<br /><br />Without an else, the code inside the conditional is skipped and the program moves on. With an else, it is given alternate instructions.",image:"step16.PNG"},{text:"So the code here reads, 'If the toggle is on, turn it off. Otherwise, turn it on.' Always display.<br /><br />I can get this function down to 2 lines of code.<br /><br />Ready?",image:"step17.PNG"},{text:"The exclamation point (!) is the symbol for a logical 'not'.<br /><br />You know.<br /><br />Not true is false. Not false is true.",image:"step18.PNG"},{text:"Since we already know that on becomes off and off becomes on, we can just take the toggle as it is and logically 'not' it.<br /><br />Think about how that works.<br /><br />If allowNegatives is true when the function runs, it will be changed to not true, which is false.<br /><br />If allowNegatives is false when the function runs, it will be changed to not false, which is true.<br /><br />Remember that everybody loves logic.",image:"step18.PNG"},{text:"This function has changed a lot.<br /><br />Instead of checking first to see whether or not the number is at 0, it just goes ahead and does the subtraction. Then it checks to see whether or not it was supposed to do that. If it wasn't, it fixes it.",image:"step19.PNG"},{text:"The condition here is testing to see if two things are true. It wants to know if the number has fallen below zero AND if negatives are not allowed.<br /><br />If both of these conditions are true, then myNumber needs to be reset to 0. <br /><br />The double ampersand (&&) is a logical AND.<br /><br />The double pipe (||) is a logical OR.<br /><br />If you remember your basic logic, an AND needs both clauses to be true in order to evaluate to true. An OR needs one of the clauses to be true in order to evaluate to true.",image:"step20.PNG"},{text:"We are also employing the logical not here.<br /><br />Using '!negativesAllowed' here is the same as testing 'negativesAllowed == false'.",image:"step20.PNG"},{text:"Finally, let's update the display!<br /><br />Since our button is responsible for telling the user whether or not negatives are allowed, the display needs to change when the button is clicked.<br /><br /><b><i>This is a front end display representing a back end change.</i></b>",image:"step21.PNG"},{text:"The message displayed on the button changes here in display and what is says is dependent on the value of our toggle.<br /><br />Your instinct will have been to change the button in the toggleNegatives() function.<br /><br />Please resist that instinct.<br /><br />Keeping your back end and your front end separate is a very important technique in programming.  It will save you hours and hours of debugging.",image:"step21.PNG"},{text:"I challenge you now to add one last piece to this program all on your own.<br /><br />If you subtract the number down below 0 and then toggle the negatives to OFF, the number won't change until you try to subtract again.  It won't even change when you add.<br /><br />Try to make this better.  If the user turns the toggle off and the number is below 0, it should instantly reset to 0.<br /><br />Good luck!",image:"step22.PNG"}]
        },
        {
            title: "Basic Strings",
            objective: "To work with manipulating strings because it's so important in every program.",
            description: "A string is a series of characters (letters, numbers, symbols, etc...) strung together.  Everything in web programming is a string.<br /><br />Well, not everything.<br /><br />But it certainly helps if you recognize that the odds of something being a string are very high.<br /><br />The web is designed that way because a string can hold any kind of information and if we need to do something with that information or convert it in some way, we can handle that at a very low level.",
            slides: [{text:"Today we're going to make a typewriter.<br /><br />Not a real typewriter.<br /><br />A virtual typewriter.<br /><br />Start with a div for your output and 26 buttons (one for each letter of the alphabet).<br /><br />Notice that there is only one onclick programmed. Don't worry about the others just yet.",image:"step1.PNG"},{text:"The initialize function does what initialize will always do. There is an object to represent the output div and a variable to represent the text that will go onto the screen.<br /><br />The message variable has been set to an empty string, which is just empty quotes.  This is because there's no message yet.",image:"step2.PNG"},{text:"The display function is currently very simple. It puts the message into the innerHTML of the messageOutput object.",image:"step3.PNG"},{text:"Finally, we have the addA() function, which puts a capital 'A' onto the end of the message.<br /><br />You can try this now. Only the 'A' button will work, but you can make a message with as many As as your little heart desires.",image:"step4.PNG"},{text:"The highlighted line of code shows how the 'A' gets added to the message.  It looks a lot like adding to a number, doesn't it?<br /><br />The '+' symbol can be used to add characters to the ends of strings. In this case, it's not considered addition, but <b><i>concatenation</i></b>.<br /><br />Make friends with that word.  You're going to see it a lot.",image:"step5.PNG"},{text:"As with mathematical operators, you can use a shortcut with a concatenation operator as shown.<br /><br />There is no ++ for concatenation.<br /><br />You can not subtract from strings, multiply strings, or divide strings.",image:"step6.PNG"},{text:"Notice how the 'A' is in quotes.<br /><br />Quotes around a string indicate that it is a <b><i>string literal</i></b>. That means that it is predefined and unchangeable.<br /><br />It is <b><i>literally</i></b> what is shown in the quotes.",image:"step7.PNG"},{text:"message is a string variable.<br /><br />That means it's a variable that holds a string value.  Like any other variable, its value can be changed (as it is here).",image:"step8.PNG"},{text:"I want to step away from strings for a moment, so bear with me.<br /><br />This function is called addA() because it adds an 'A' to the end of the messsage.  We have 25 other buttons for the other 25 letters of the alphabet.<br /><br />In order to make this thing work in the way it's designed, we're going to need 25 other functions to handle all of those other letters.<br /><br />I don't want to write all of those functions.<br /><br />Do you?",image:"step6.PNG"},{text:"Remember when we started calling functions like 'log' and 'getElementById'? We passed through arguments that gave the functions information.<br /><br />I want to use arguments here.<br /><br />I want to write one function and just <b><i>tell it</i></b> which character to add to the end of the string.<br /><br />And so I have.",image:"step9.PNG"},{text:"Replace the addA() function with the addCharacter() function.<br /><br />This function is designed to take in a piece of information and concatenate that piece of information onto the end of the message.",image:"step10.PNG"},{text:"In this function, 'ch' is a local variable called a parameter.  Its job is to receive whatever information is sent to it.<br /><br />When the function call is addCharacter('A'), ch will become 'A'. When the function call is addCharacter('B'), ch will become 'B'.",image:"step11.PNG"},{text:"You can concatenate variables onto strings the same way that you can concatenate string literals onto strings.",image:"step12.PNG"},{text:"Add some buttons for numbers.<br /><br />The first thing you should note here is that these numbers are being passed as strings.<br /><br />How do you know?  The single quotes.<br /><br />In Javascript, single quotes and double quotes are interchangeable.<br /><br />So why am I using singles here?<br /><br />Because the onclick event is inside of doubles.  If I use doubles inside doubles it confuses the browser.",image:"step13.PNG"},{text:"Passing the numbers as strings is actually irrelevant to this example.  We could just as easily have passed them as numbers (no quotes) and the result would have been the same.<br /><br />When dealing with the plus (+) operator, the browser uses very simple logic. If both expressions being added together are numbers, it will do a mathematical addition. If not, it will concatenate.<br /><br />Try adding a space button, and any other buttons you'd like.  You'll find that a single space is a character just like any other. When you're done, check out the Calculator sample for more information on basic strings and string building.<h3><i>Now that you have completed all 9 lessons for Level 1, choose 1 of the projects from the Projects section as your Level 1 Assignment.</i></h3>",image:"step13.PNG"}]
        }
    ],
    samples: [{
            title: "Children's Story",
            text: "This program takes a short children's book and adapts it to a web page.  Without Cascading Style Sheets (CSS), which helps us change colors and fonts, there is little that we can do.  However, there are some HTML tags that can be used to arrange and enhance our text.  It's a good idea to familiarize yourself with some of these tags.",
            lesson: "HTML Structure"
        },
        {
            title: "Countdown",
            text: "The Countdown sample demonstrates how to sequence a series of functions together to form a countdown from 10 to 0. It illustrates functions and events.<br /><br />You should attempt to write this program before viewing the sample.  The program consists of a single button that the user can click.  When the button is clicked, it will display a countdown from 10 to 0 to the console screen.",
            lesson: "Basic Events"
        },
        {
            title: "Up and Down",
            text: "This program demonstrates how information can be updated on screen by capturing HTML elements into objects.  It also shows the most important basics of back end and front end sequencing.<br /><br />You should attempt to write this program before viewing the sample.  The program consists of 2 buttons (Add and Subtract) and a single number (starting at 0) on the screen.  When the user clicks the add button, the number will go up by 1.  When the user clicks the subtract button, the number will go down by 1.",
            lesson: "Elements as Objects"
        },
        {
            title: "Calculator",
            text: "The string calculator gives you a good example of how to build a single string from many different variables and literals. Additionally, it reinforces and expands upon what you learned from the Conditionals lesson.",
            lesson: "Basic Strings"
        }
    ],
    faq: [{
            question: "Is the browser a compiler?",
            answer: "No. The browser is an interpreter."
        },
        {
            question: "What's the difference between a compiler and an interpreter?",
            answer: "A compiler is used for application languages, like Java or C++ or C#. A compiler reads your code and, if there are no errors, turns it into machine code so that it can be executed on a computer. If there are errors, it will alert you so that you can fix them. An interpreter starts at the top of your code and executes each line as it reads it. If there are errors in your code it will ignore them unless they are so severe that they prevent the program from continuing. Then it just crashes."
        },
        {
            question: "Is HTML case sensitive?",
            answer: "HTML is not case sensitive, however modern standards expect that all HTML code is written in lowercase letters."
        },
        {
            question: "What does deprecated mean?",
            answer: "Code that has been deprecated is code that has been rendered obsolete. Though many browsers will still recognize deprecated code for backwards compatibility, you should always avoid it."
        },
        {
            question: "How can I recognize whether or not internet coding examples are outdated?",
            answer: "Check the dates. If you find code online that is more than 5 years old, you shouldn't use it directly. It may give you great ideas on how to solve problems, but make sure you understand it and can rewrite it in a modern style. Also, avoid HTML examples that are written in ALL CAPS. Old HTML programmers used capital letters, but the standard now says to use all lowercase."
        },
        {
            question: "The span doesn't do anything. Why would I ever want to use it?",
            answer: "Patience, young jedi. Patience."
        },
        {
            question: "How do I center the text, change the color, change the font?",
            answer: "All of these things are done through CSS. Beware of old HTML that can have these effects, but is deprecated. The most common HTML tags that you should never use are CENTER, FONT, U, STRONG, EM, and most especially MARQUEE. These are all deprecated."
        },
        {
            question: "Do I have to use functions?",
            answer: "The short answer is no. The long answer is you should use functions as much as possible because it helps you to organize and cuts down on repeat code. If you're writing a tiny little script that happens once when the page loads and is done, there's no need for a function. The more you write, however, the more you'll discover that you'll want to make things that are reusable across many projects. At that point, you're not only talking about functions, but objects, too."
        },
        {
            question: "What does it mean when it tells me that one of my variables is undefined?",
            answer: "It means you never properly introduced your variable. More often than not, you mistyped it somewhere. Remember that Javascript is case sensitive, meaning that 'A' and 'a' are two different letters. Check back in your code to the place where you created the variable. With a little luck, you'll solve it pretty quickly."
        },
        {
            question: "I've looked online and seen code that uses 'document.getElementById('someid').innerHTML = 'Some String'. Why do we have to store it in a variable?",
            answer: "getElementById() is a function that looks through the entire page, finds the object with the matching id attribute, and returns it. When a function returns a value in this way, the call actually takes on the guise of that value. That means you can use it as that value. The function call is a one-and-done situation so, if you need that value later on, it's worth storing it in a variable. If you only need it the one time, you can use it right there on the spot. Since getElementById() returns and object, you can use the function call as that object and access its innerHTML."
        },
        {
            question: "Can I use strings to build variable names?",
            answer: "The short answer is no. Variable names are fixed and we use data structures later on in order to track multiple variables at once. That having been said, you can build variable names inside of template literals (see the Calculator sample). You still need to have actual variables predefined individually, but you can use the template literals to access them."
        }
    ],
    projects: [{
            title: "Calorie Counter",
            text: "The Calorie Counter program will give the user the ability to create 'meals' and determine the number of calories a meal holds. The user will be asked to provide information for 3 foods (appetizer, entrée, and dessert). The information needed for each food is as follows:<br /><br />The user will be asked to enter the number of grams of fat in the food.<br />The user will be asked to enter the number of grams of carbohydrates in the food.<br />The user will be asked to enter the number of grams of protein in the food.<br /><br />The page will continuously update, displaying the number of calories for each course and for the whole meal."
        },
        {
            title: "Codebreaker",
            text: "As an international sneak thief, you break into vaults all the time.  Riddling out a simple 3 digit code is child's play for you.  But you must be getting sloppy in your old age because you've tripped an alarm.  In no time at all, the police will be all over the place.  Can you get into the vault before they arrive?<br /><br />The user will have to crack a 3 digit random code in 7 turns.  Each time the user completes a 3 digit guess, the computer will tell him or her whether the code is higher, lower, or correct."
        },
        {
            title: "Count de Money",
            text: "Count de Money is a rich old man whose favorite pastime is figuring out how much his coins are worth.  He's got buckets of coins and likes to pull them out, one at a time, and drop them into the counter.  Then he can see how many coins he has and how much they're worth.<br /><br />The Count de Money page will allow the users to add and subtract from each of 4 types of coins (pennies, nickels, dimes, quarters).  Each time the user changes the number of a coin, (s)he will be able to see the result of the change to the value of the collection."
        },
        {
            title: "gobliN stoNe gaMe",
            text: "The goblinS have invented a game that, in their language, is impossible for us to pronounce, but, in English, is called the stoNe gaMe.  The two best gobliN players of all of the goblinS who play the stoNe gaMe are unK and glooB.  The game is played by setting up 3 piles of stones.  Each pile has 3 stones in it.  On your turn, you can take any number of stones from any pile you like.  If you take the last stone from the last pile, you lose the game."
        },
        {
            title: "Hot and Cold",
            text: "In the game of Hot and Cold, the player gets a set number of turns to 'find' a number.  As the player guesses, (s)he will be informed of how close (s)he is to the actual number in terms of hot and cold."
        }
    ]
};