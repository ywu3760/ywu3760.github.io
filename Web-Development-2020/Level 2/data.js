const PAGE_DATA = {
    level: "Level 2",
    title: "Dressing Up Your Pages",
    lessons: [{title:"Some Basic CSS", objective:"Objective: Understand the basic format of Cascading Style Sheets.", description:"CSS is used to make your web pages sparkle. Almost any cool layout or graphic that you see on a web page is made using CSS. Once you understand the basic syntax, it should open the door to a lot of possibilities.<br /><br />CSS code essentially reprograms how an HTML tag behaves. You specify the tag and then list the changes you want to make.",slides:[{text:"Type this up as you base program. It's just your basic template with some text in the body.<br /><br />We're going to make this pop with some color.",image:"step1.PNG"},{text:"You can put CSS code in either its own CSS file (which we'll do in a later lesson) or in the <b><i>style</i></b> tag.<br /><br />The real truth is that there's also a 'style' attribute for HTML tags that allows you style a specific tag, but it's a little messy and I very very very very very rarely use it.",image:"step2.PNG"},{text:"What CSS does is it allows you to reprogram the look of tags.<br /><br />In this example, I'm reprogramming the body tag. It almost looks like a Javascript function because of the braces, but there are no parameters and arguments.<br /><br />No parentheses.",image:"step3.PNG"},{text:"You can set the look of the tag by using property:value pairs.<br /><br />In this case, the code changes the color of the text to green.<br /><br />Try it.",image:"step4.PNG"},{text:"The color property specifically refers to text color. Because the code reprograms the body tag, all of the text on the page will be green.",image:"step4.PNG"},{text:"Add a div to the page and put some text in it.<br /><br />I bet if you try it you'll find that the text is green.",image:"step5.PNG"},{text:"However, if you reprogram the div tag to use red as the text color, it will change just the color inside the div to red.<br /><br />Try this.",image:"step6.PNG"},{text:"You can program all of the different tags in different ways, but remember that you are programming all of that tag at once.<br /><br />If you add another div to this page, its text will also appear in red.",image:"step6.PNG"},{text:"Now try this.",image:"step7.PNG"},{text:"When you add the span to the div, its color also appears in red. This is because the span is a direct descendant of the div (its child). HTML elements have a tendency to inherit property values from their ancestors.",image:"step7.PNG"},{text:"If we were to go ahead and redefine the span tag, however, the results would be totally different.",image:"step8.PNG"},{text:"Using color names, or mnemonics, is easy, but there isn't always a mnemonic for the color you want. You can also use hexidecimal values from 00 to FF (0 to 255) to represent colors. Those hex values are strung together and look like this:<br /><br />#RRGGBB<br /><br />That means that #00FF00 would be all green.<br /><br />There is a hex color finder on w3schools.com.<br /><br />Try this.",image:"step9.PNG"},{text:"If you don't like hex numbers, you can also use decimals.<br /><br />This really looks like a function and, I guess, it is. You're passing in values to represent red, green, and blue.<br /><br />Unlike Javascript, however, CSS doesn't give a way to write your own functions. There are a few things that look like this and we just use them as they are.",image:"step10.PNG"},{text:"CSS also gives us rgba, where the 'a' stands for 'alpha'. The alpha value controls opacity.<br /><br />Opacity is a value from 0 to 1, where 0 is fully transparent (invisible) and 1 is fully opaque (solid).<br /><br />Try this.",image:"step11.PNG"},{text:"In addition to text color, you can change the background color.<br /><br/>Be careful when choosing a color scheme for your page. Beginners tend to like bright, crazy colors that they think might help their pages stand out. What you really want, though, is something that makes a visitor to your page feel comfortable and welcome. You know, something that doesn't burn their eyes out of their heads.",image:"step12.PNG"},{text:"Over the course of these lessons, you'll see a lot of examples of different CSS properties, but you won't see every single one there is.<br /><br />Get comfortable with doing some online referencing. There are several websites with good information.<br /><br />w3schools.com has a pretty complete reference.<br /><br />Go ahead and search up 'text-align' and find out what all of the different values are for this property.",image:"step13.PNG"}]},{title:"Working With Images", objective:"Objective: To work with HTML images. Really.", description:"We, the human race I mean, are visual creatures. Seeing is believing and all that. This is why so much of web design is focused on graphic design. Keep that in mind always. We are web developers. That means we have to have an understanding of how to manipulate the visuals in the digital environment.<br /><br />When working with images, it's best to stick with one of two types. Jpegs (.jpg) are small files that load easily into your page. The drawbacks to jpegs is that they don't support transparency. Portable Network Graphics images (.PNG) are a little bigger, but they do support transparency.<br /><br />Before you dive into this construction, download the <a href = 'lessons/working with images/Working With Images Construction Files.zip'>Working With Images Construction Files</a> and unzip it somewhere on your drive.<br /><br />This file contains all of the images you'll need for this construction as well as an empty HTML template.",slides:[{text:"This is where we start. It's not so glamorous, is it?<br /><br />The 'img' tag is the image tag. Notice that it is a self closing tag, meaning there is no opening or closing tag, just the one tag. That also means it has <b><i>NO INNERHTML</i></b>.",image:"step1.PNG"},{text:"The 'src', or 'source', attribute tells the tag what image to show.<br /><br />It's just a filename. You'll find that file in the same folder as your index.html.<br /><br />That's important.<br /><br />We'll talk about that in a minute.<br /><br />In the meantime, load up your page and gaze upon the delightful image of David Tennant as Dr. Who.<br /><br /><h6>If you're not a Dr. Who fan, feel free to go to the web and get another image. If you are a Dr. Who fan, but not a David Tennant fan, then I don't know what to say. He was the best one.</h6>",image:"step1.PNG"},{text:"Now try to center your image.<br /><br />You know you want to.",image:"step2.PNG"},{text:"Didn't work, did it?<br /><br />An img tag is an inline tag, like a span. That means that it takes up only the space of the content. You cannot center an inline tag because there's no white space to put on either side of it.",image:"step2.PNG"},{text:"Now try putting a block tag around it, like a div.<br /><br />Don't try it yet. It's still not going to work.",image:"step3.PNG"},{text:"Move the text-align from the img tag to the div tag.<br /><br />Despite the fact that an image is NOT text, the text-align attribute really centers content. Therefore, as long as the image is part of the content of a block element, it will be centered along with everything else inside that block element.<br /><br />Try it.",image:"step4.PNG"},{text:"Now try this.",image:"step5.PNG"},{text:"We set the width to 100% and the image took up the whole width of the screen.<br /><br /><h6>Actually, it's the width of the div, but the width of the div happens to be the width of the screen. If the div were smaller, the image would be smaller.</h6><br /><br />Note, also, that the height of the image was also adjusted to maintain the aspect ratio (the ratio of horizontal pixels to vertical pixels).",image:"step5.PNG"},{text:"What happens if we try to set the height to 100%?",image:"step6.PNG"},{text:"That didn't seem to work at all. It's not because you made a type-o (check for type-os) or because of the text-align.<br /><br />When you adjust height and width, you can use one of a number of different types of units. Here, we're using percentage (%). When you set something's height or width to be a percentage, you have to wonder, 'a percentage of what'.<br /><br />In the case of both height and width, it's a percentage of the parent, in this case, the body.",image:"step6.PNG"},{text:"The body is not your document and it's not your screen. It's just a part of the document. It is a block element, which means ITS with is the width of the window, but its height is the height of the content. So the truth is that your page is doing exactly what you told it to do. It's sizing the image so that its 100% of the width of the body, which is only as tall as it is because of the height of the original image in the first place.<br /><br />You may have to read that again.",image:"step6.PNG"},{text:"The next thing I want you to do is add a span to the page. Then put a whole lot of text into it.<br /><br />Just go online and copy something that's 4 or 5 paragraphs long.",image:"step7.PNG"},{text:"If you pasted the text properly into the span, you should notice a few things.<br /><br />The text is centered. It may be difficult to notice because there's so much of it and it's all bunched together, but as a child of the div, it's centered.<br /><br />The text may not broken up the way it is in the code. Remember that white space is ignored by the browser.<br /><br />Most importantly, the beginning of the text is vertically aligned with the BOTTOM of the image. This is because they shared the same line and the browser automatically aligns things vertically.",image:"step8.PNG"},{text:"There are some really great things you can do with CSS in order to alter the positioning of your elements. We'll investigate some of those later.<br /><br />For now, you have <b><i>float</i></b>.<br /><br />Floating an HTML element (because you can float anything, not just images) takes it out of the static context. That means that your browser just pushes it to once side and fits everything else around it. It's convenient and useful, but can wreak havoc is misused.<br /><br />Your values for the float property are left, right, and none.<br /><br />No matter how you word it, you cannot float to the center.<br /><br />Try this.",image:"step9.PNG"},{text:"For giggles, let's justify the text.<br /><br />Justified text is evened out on both the left and right margins. It makes your text look really neat, but can go awry if there isn't enough space because it might create huge gaps.<br /><br />Try this.",image:"step10.PNG"},{text:"The words might be all pressed up against your image.<br /><br />Try using the padding property to add space all around your image.<br /><br />You can pad an element along its right, left, top, or bottom border (or any or all of them). Padding adds white space around the element that the browser doesn't ignore.<br /><br />Padding, like width and height, uses a unit of measure. The padding added to the right of the image here is 20 pixels (px).",image:"step11.PNG"},{text:"I've added in some pictures of old doctors. You know, in case you're not a David Tennant fan. The src attribute for these images is a little different from the src attribute from the first image.<br /><br />Remember when you were supposed to note that the David Tennant image was in the same folder as the HTML file?  These images are in a folder called 'images' that is in the same folder as the HTML file.<br /><br />We are using folders to organize our files. A RELATIVE PATH begins in the ROOT folder, the folder containing your index.html. From there, each new directory is separated by a slash (/).<br /><br />An ABSOLUTE PATH begins in the root of a specific drive (C:/...).<br /><br />NEVER USE AN ABSOLUTE PATH.",image:"step12.PNG"},{text:"Bear with me for a little while because this is important stuff.<br /><br />We're running client side pages on our local machine. When a website is published, it's uploaded to a server. The user or client or person sitting at the computer downloads your page to his or her machine.<br /><br />So, to recap, every website you visit when you're sitting at home in your pajamas, munching on devil dogs and stale chips is actually on your computer.",image:"step13.PNG"},{text:"All of the available drives on your computer have a letter. The hard drive is usually C and the DVD drive, if you have one, is usually D. Flash drives and other types of storage are given letters on the fly. A typical absolute path may look like:<br /><br /><b>C:/folder1/folder2/mypage.html</b><br /><br />That's <i>your</i> page on <i>your</i> drive.<br /><br />That path does not exist on any other computer. So, if you tell the page that your image file is down that particular path, it's only going to be able to find it when it's running on your computer.",image:"step13.PNG"},{text:"That's why we stick with relative paths. In the construction, we put just the image name into the src attribute. And the image file was in the same folder as the HTML file. That will work on any machine because it uses a relative path.",image:"step13.PNG"},{text:"A relative path starts with a root. The root is basically wherever your file is. So, when you specify just a filename, the page assumes it's in the root. If you were to put something like this:<br /><br />src = 'images/myimage.PNG'<br /><br />It would look for a folder in the root called images and a file in images called myimage.PNG. Since the root is dynamic, you can set up whatever kind of directory structure you like.<br /><br />Download and review the Image Gallery from the samples section.",image:"step13.PNG"}]}, {title:"Dynamic CSS", objective:"Objective: Alter the look of a web page with Javascript.", description:"Static and dynamic are two terms that computer programmers like to throw around a lot.<br /><br />When something is static, it never changes. You can forever depend on it to be exactly the same every time you run your page. It's boring.<br /><br />When something is dynamic, it is adjustable on the fly. That means that your end user can make meaningful decisions and your code can react to those decisions. It's exhilarating!<br /><br />If we can make variables dynamic in that their values change at the click of a button or as a function of some other part of your program, can we do the same with CSS?<br /><br />Well of course we can.",slides:[{text:"This construction will show you some basics for manipulating CSS with Javascript.<br /><br />Let's start with some text in a div and a button to activate an effect.",image:"step1.PNG"},{text:"Give it a nice orange background with black lettering.<br /><br />For Halloween.<br /><br />Is it close to Halloween?",image:"step2.PNG"},{text:"Create a Javascript object to represent the HTML element, the div.<br /><br />Remember that CSS reprograms HTML elements. That means, if we want to change the way an HTML element looks on screen, we need to access that element through Javascript.",image:"step3.PNG"},{text:"Since we never work without back end variables, even if they represent front end properties, create a variable to represent the color of the foreground (the text) and one to represent the color of the background.<br /><br />Notice that they match what we've programmed into CSS. When coding a program, it's very important to make sure that your front end and your back end are in sync when the program launches.",image:"step4.PNG"},{text:"Remember that button we made? The one that says 'Toggle Colors'?<br /><br />It's job is to switch the background and foreground colors.<br /><br />Add this function, but don't run the program yet. It's not done.",image:"step5.PNG"},{text:"What we have here is a standard swap algorithm, that is, an algorithm that switches the values of two variables.<br /><br />A swap algorithm works with a temporary variable as a placeholder for one of the values. Since you overwrite an existing value whenever you save a new one to a variable, this can't be done with just the two variables.<br /><br />Copy one into the temporary. Copy the second one into the first one. Copy the temporary into the second one.<br /><br />Voila! They're swapped.",image:"step6.PNG"},{text:"Notice that the temporary variable is preceded by the keyword <b><i>var</i></b>.<br /><br />The var keyword is used to create local variables within a function. That means that this variable, tmp, exists only in the toggleColor function. If I use tmp anywhere else, the system won't know what I mean. If I create another variable named 'tmp' somewhere else, it will be a completely different variable with the same name.",image:"step7.PNG"},{text:"Don't forget your onclick!<br /><br />Try this.",image:"step8.PNG"},{text:"It didn't do anything, did it?<br /><br />I hope you didn't spend a lot of time trying to debug it.<br /><br />The problem is that there's no call to display. Your program is working fine, but you haven't shown the results on screen.<br /><br />Don't try it yet.<br /><br />You haven't written the display() function.",image:"step9.PNG"},{text:"Okay. Type this function into your page and then try it. It should work now.",image:"step10.PNG"},{text:"Strings are everything in web programming. Absolutely every CSS property value comes in the form of a string. Even the numbers. When you manipulate them in Javascript, you must record them as strings, either with variables or by using quotes.",image:"step11.PNG"},{text:"This page initializes the back end variables to strings and uses them as strings throughout the whole program.<br /><br />Easy.<br /><br />But if we had some numbers, things would get a bit more difficult.",image:"step12.PNG"},{text:"That's why we always work with back end variables. Let's say you want to manipulate the color of something and you're working with RGB values. Those are decimal numbers (0 to 255), but the property value looks like, 'rgb(123, 123, 123)'. If I want to add, subtract, or perform some other arithmetic operation on the amount of red in the color, I can't do that with the string. I'd need to extract the red value from the string, convert it to a number, perform my operation, and then put it back into the string.<br /><br />That's a lot of work.<br /><br />Instead, I can just use 3 numeric values for red, blue, and green and update them as needed. Then I'll just display them at their values.",image:"step11.PNG"},{text:"Let's play with some numbers here. Add the textWidth variable to initialize and give it a starting value of 100.<br /><br />Spoiler alert: this is going to translate into 100%, which is the current width of the text.",image:"step13.PNG"},{text:"Now add some more buttons.<br /><br />Each of these buttons will alter the width of the text by passing a number through to a function called changeWidth().",image:"step14.PNG"},{text:"The changeWidth() function very simply changes the global back end variable to match the selected width. Then, of course, it calls display() so that the user can see it.",image:"step15.PNG"},{text:"This is where the magic happens.<br /><br />The CSS property can work with a number. It'll just convert as needed on the fly. But it has to know the measurement, just as if we'd put it into CSS. So we concatenate the percent sign (%) onto the end of the number. Without that concatenation, this won't work.<br /><br />Try this now. When you're done, check out the Dynamic Color Change sample program.<br /><br />Happy Halloween!",image:"step16.PNG"}]}, {title:"CSS Complex Properties", objective:"Objective: To understand the structure of the values of CSS properties.", description:"CSS goes a lot deeper than just color and text alignment. When you start working with fonts and borders, you have to deal with a cornucopia of different properties that make up the whole shebang dang doodle.<br /><br />Let's talk about some fonts.<br /><br />If I want to change my font to, say, comic sans ms (because everyone loves comic sans ms), you can do that. But what size is it?  Is it bold or italic or normal?  Do you want it underlined?  Each of these different possible aspects of the text have their own CSS properties that go with them.<br /><br />As you may have guessed, setting up a font can get pretty involved. And setting up a font isn't the only thing that's built this way.",slides:[{text:"Let's start with some text in a div.<br /><br />Exciting stuff!",image:"step1.PNG"},{text:"If you want to change the font of some text, use the font-family property.<br /><br />The value of the property is the name of the font. It MUST match the name of the font in your operating system. If the font is not part of the user's operating system, then it will go to the default font for the browser.<br /><br />This means that if you're building a page and you downloaded this really cool font, it may not exist on the user's machine and the user may not see it.<br /><br />You can try this now.<br /><br /><h6>If you want to force the user to download your cool font, you can use @font-face. If you want to know how to use @font-face, go ahead and look that up online.</h6>",image:"step2.PNG"},{text:"Using the font-size property, you can change the size of a font. Like some other properties we've seen, font-size needs a unit of measurement. Here, I'm using 'points' (pt). Font sizes are generally measured in points and fonts are the ONLY thing that can be measured in points.<br /><br />If you like, you can measure fonts in any other unit of measure, but they usually have unsatisfactory results.<br /><br />Two other good units for fonts are vh and vw, which dynamically change the font size to represent 1% of either the viewport (or window) height or width.<br /><br />Try this now.",image:"step3.PNG"},{text:"Finally, you can change the 'boldness' of your font using the font-weight property. This property has 2 possible values:  normal and bold.<br /><br />Okay, that's not entirely true.<br /><br />You can also use bolder, lighter, 100, 200, 300, 400, 500, 600, 700, 800, and 900, but you will seldom have good results with these. I have found that a lot of fonts don't seem to support them. Many fonts have their own light and bolder versions. It's best to stick with those fonts and the 2 values above.<br /><br />Try this.",image:"step4.PNG"},{text:"One of the nice things CSS offers is a way to shorthand some of the things that use multiple properties, like fonts.<br /><br />The shorthand property for fonts is 'font' (crazy, right?).<br /><br />When using a shorthand property, the order in which you put the values is important.<br /><br />font: weight size family;<br /><br />There are no separators except for spaces and you can omit the weight, leaving just the size and the family.<br /><br />You can try this, but there should be no change.",image:"step5.PNG"},{text:"There are other properties that work with your fonts. You can find these in the CSS reference section on w3schools.com or simply by searching for them online. One particularly useful one is text-decoration, which allows you to underline, overline, and/or line-through your text. Since the HTML tags that used to do these things are deprecated, having this in your toolbox can be very helpful.<br /><br />In addition, you can set text-decoration to none, which will remove an underline, say, from a hyperlink.",image:"step6.PNG"},{text:"Like font, text-decoration has a number of properties associated with it. You can change the style (solid, wavy, dashed, dotted, double) and color of your lines.<br /><br />You should <i>definitely</i> try this.",image:"step7.PNG"},{text:"There is also a shorthand for text-decoration.<br /><br />text-decoration: decoration style color;<br /><br />You can omit EITHER the style OR the color and it will work.",image:"step8.PNG"},{text:"Let's make things a bit more interesting and go dynamic.<br /><br />Add a div that will show the current font size and some buttons that let the user change it.",image:"step9.PNG"},{text:"For our next trick, create an initialize() function that sets Javascript objects for the text and the size of the text.<br /><br />Since we're going to be working with font size, we need to have a back end variable that keeps track of our current font size.<br /><br />The initial value has been set to 24, which matches what was used in the CSS.",image:"step10.PNG"},{text:"The modifyFontSize() function takes in a modifier and adjusts our back end variable.<br /><br />Set the lower boundary to 4, unless you have microscopic vision that is.<br /><br />There's no upper boundary. You go to town on that.",image:"step11.PNG"},{text:"Finally comes the display. We're outputting the actual size of the font, but we're also updating the font size of the text.<br /><br />The 'pt' designation (point) is concatenated onto the end of the font size, like we did for text width last lesson. Remember that the browser needs to know how to measure your numbers. If you don't tell it, it won't do it.<br /><br />This should work now.",image:"step12.PNG"}]}, {title:"External Files", objective:"Objective: Use different files. Lots of different files.", description:"Up until now, we've been stuffing every bit of code into our HTML files. HTML files are designed for it. That's why there's a script tag and a style tag. Because, ultimately, the browser has to look at everything together as a single entity in order for it to execute properly.<br /><br />Consider this:  You have this web site, which consists of several different HTML pages. Each page works independently, but they all share the same style and they use a lot of the same Javascript functions in order to make their features work<br /><br />What do you do?<br /><br />Well, you can copy and paste the code from file to file or you can make a single CSS file and a single Javascript file and import them into every HTML file. This kind of thing saves programmers lots and lots of time. And programmers need that time so that they can come up with other ingenious programs.<br /><br />And eat pizza.<br /><br />And play video games.",slides:[{text:"The first thing we're going to do is make our first Javascript file. Call it 'utilities.js'.<br /><br />See that .js extension?  That stands for Javascript. Your Javascript file may not have any other code except for Javascript. No CSS. No HTML. Not ever.<br /><br />I like to have a utilities file.<br /><br />A utilities file is a file that has a whole bunch of functions I use often and in many of my programs. That way, I can just include this file with all of my pages and never have to rewrite or copy/paste my functions.<br /><br />I also don't have what I would consider to be 'utility' functions cluttering up my code.",image:"step1.PNG"},{text:"This first utility function is called getRandomInteger(). It's designed to give you a random integer between lower and upper.<br /><br />The general formula for the function is right there in the comments. The function itself is broken up into 3 lines.<br /><br /><h6>Notice that return statement at the bottom? That's the line that sends back the generated random number. We'll look at return statements in Level 3.</h6>",image:"step1.PNG"},{text:"Now take a look at this template. There's an extra script tag.<br /><br />External Javascript files are imported into your HTML file through a script tag.<br /><br />The src attribute, like the src attribute of an img tag, specifies the imported file.<br /><br />It is VERY IMPORTANT to remember:<br />1 - Imported Javascript requires and opening and a closing tag.<br />2 - You MAY NOT put Javascript code inside of that tag.<br />3 - You may use multiple script tags for multiple imported files and additional code.",image:"step2.PNG"},{text:"Add in some useful HTML that we can use to show our randomly generated numbers.",image:"step3.PNG"},{text:"Put some code into initialize()/<br /><br />Not to belabor the point, but please take note of the back end variable rndNum, which will contain the current random number for the duration of the program.",image:"step4.PNG"},{text:"The changeNumber() function calls getRandomInteger() and stores the returned random number in the global variable.<br /><br />The very important pieces to note here are:<br /><br />1:  We are generating an integer between 1 and 10.<br />2:  The function call is set as the value going into the randNum variable. The return statement allows for that.",image:"step5.PNG"},{text:"Finally, we output the random number to screen.<br /><br />You can try this now.",image:"step6.PNG"},{text:"Now let's dress this puppy up by adding CSS.<br /><br />Create a new file called 'my css test file.css' and add the following code.<br /><br />See that .css extension?  That stands for CSS. Like the Javascript file, your CSS file must have exclusively CSS code.",image:"step7.PNG"},{text:"You'd think that a CSS file would be imported through the style tag, like the Javascript file, but that's not the case. CSS files are imported through the link tag.<br /><br />The link is a self-closing tag that uses the href attribute (like an 'a' tag) to access the CSS file.<br /><br />The rel attribute tells the browser what kind of file is being imported. This is necesssary because the link tag can be used to import other kinds of files as well.",image:"step8.PNG"},{text:"At some point over the course of the evolution of this industry, someone said, 'Hey. I already did this.' and didn't want to do it again. So, that person, or someone else in the same boat, came up with modular programming. Modular programming means you're writing code that is portable. It's something that can be useful on a variety of projects and that creates efficiency in a lot of ways.<br /><br />You don't have to write new code to do something you've already done.<br /><br />You don't have to retest that code.<br /><br />You do have to test the way your new code might interact with it, but if there's a problem, it's easier to nail down because it's got to be the new code.<br /><br />Modular code led to engines. An engine is code that performs functions on a very basic level. When you write a program, you take its engine, and build your specifics on top of it. If anyone's ever told you not to reinvent the wheel, that person was talking about engines. Why spend weeks or months or even years writing a whole lot of complicated code when someone's already done it?<br /><br /><b><i>Disclaimer:  This doesn't mean that you should be stealing your project solutions from the internet. It means you can use tools that already exist to solve the problems assigned to you.</i></b>",image:"step9.PNG"}]}, {title:"Site Navigation", objective:"Objective: To focus on organizing your sites into a group of pages.", description:"With all of the attention we pay to coding and design, one of the most important front end pieces that often gets overlooked is site navigation. There's a big difference between making a web page, like we've been doing, and making a website. A website is comprised of several different pages and your end user needs to be able to navigate through those pages with relative ease. User Experience has become an industry all of its own.<br /><br />What you want to learn is organization. If you have a shopping site, you're going to have a home page. Wherever the user is on the site, that user needs to be able to get back to the home page. Always. That means that every page that you have has to have a link for that. The home page should have links to all of the upper level pages of your site. All of the upper level pages need to have links to the next level and back so that you're setting up a navigational hierarchy that is complete and intuitive.<br /><br />Like programming in Javascript, setting up page navigation requires planning and testing. Know what your pages are going to be and what needs to link to them. Run through the site yourself and then have others test it to see if it operates the way you want it to.",slides:[{text:"We start with a hyperlink.<br /><br />We create hyperlinks by using the anchor tag (a).<br /><br />In order for the anchor to work, you need to create an href attribute and assign it a value that corresponds with the page you want to link to.<br /><br />Now go ahead and create a second HTML page. Call this one 'destination.html'.",image:"step1.PNG"},{text:"The code here is very similar to the code in the home page, except that the href now indicates 'index.html'. You should now be able to bounce back and forth between the two pages.<br /><br />Remember that your href MUST specify the name of the linked page EXACTLY. As with images, you may organize your files into folders and use a relative path.<br /><br />NEVER use an absolute path.<br /><br />Run the index. When you try it for the first time, you'll notice that the text for the link is blue. This represents an 'unvisited' link. Once you click on the link, the page will be stored in your browser history and the text will appear purple.",image:"step2.PNG"},{text:"When you link to a page on your site, you can use a relative path. When you want to link to something external, something OUT THERE on the web, you need to use an http connection.<br /><br />HTTP stands for HyperText Transfer Protocol and is the method by which we connect to web pages. Remember that HTML is HyperText Markup Language.",image:"step3.PNG"},{text:"The thing about linking to external pages is that you're directing your users away from your site. That's bad for business. That means they can only get back to your site with the back button or their original navigation plan. A popular way to keep users on your site, while allowing them to foray elsewhere, is to open up the linked page in a new tab.<br /><br />The target attribute with the _blank value does that.",image:"step4.PNG"},{text:"You can alter the look and feel of your links by using CSS. If you change the color, then the page will ignore whether or not the link has been visited. In addition, you can remove the underline.<br /><br />Remember that altering the look of your links may hide the fact that they ARE links. Always think of your end user first. If you change a link, it must still be obvious to the user that it is still a link.",image:"step5.PNG"},{text:"Go ahead and check out the Children's Story Revisited sample from the sample pages. It gives a much more in depth example of how to use external files and links.",image:"step6.PNG"},{text:"Before you go, you should see this really cool thing called sessionStorage.<br /><br />Add the new line of code shown to the destination page.<br /><br />What's going to happen? Think about it. Are you excited?",image:"step7.PNG"},{text:"We want the destination page to record the number of times we visit it and give us that information.<br /><br />Let's go into initialize and make this thing happen.<br /><br />The sessionStorage object allows us to save values to the browser as opposed to the page. This means that those values will exist for as long as the browser is open.",image:"step8.PNG"},{text:"sessionStorage is an object.<br /><br />We can create and add any properties we want to it just like creating our own variables.<br /><br />This first 'if' checks to see if the numVisits property has been created for sessionStorage. If NOT (!), then we create it and set it to 0.",image:"step9.PNG"},{text:"If it <i>has</i> been created, then we can just change its value the same way we would change the value of any variable.",image:"step10.PNG"},{text:"Then we just go ahead and display it.<br /><br />Try it! It's pretty awesome!<br /><br />Whenever you feel ready, you can now go ahead and choose a Level 2 project.",image:"step11.PNG"}]}],
	samples: [{title:"Image Gallery", lesson:"Working with Images", text:"This program displays a clickable image gallery. There is a series of small thumbnails and one larger image. Whenever the user clicks on one of the thumbnails, the represented image also appears as the larger image."}, {title:"Dynamic Color Change", lesson:"Dynamic CSS", text:"Create a page that allows the user to change the background color by adjusting the values of red, green, and blue. The interface will include a display showing the values of red, green, and blue on the page (numbers between 0 and 255) and buttons that allow for the modification of these numbers (+1, -1, +5, -5, +10, -10)."}, {title:"Children's Story Revisited", lesson:"Site Navigation & External Files", text:"Using the original children's story from Level 1, break up the different pages into actual web pages.<br /><br />Create a CSS file that handles all of the styling for all of the pages and link it to each page."}],
    faq: [{question:"How come centering a span doesn't do anything?",answer:"HTML displays tags in one of two ways. Inline or Block. A Block tag takes up a whole line and an inline tag takes up just the space of the content. Your div and p tags are block tags. Whether you have 1 word or 100 words, they take up whole lines and can be centered on those lines. Your span is inline. Its boundaries begin at the beginning of your first word and end at the end of your last. There's no centering because there's no additional room."}, {question:"Is the root where my index.html is?",answer:"No. The root is dynamic. When the browser opens a page, any page, the root is the folder where that page resides."}, {question:"How can I access files in a parent folder?",answer:"Use the dot dot (..) notation. For example, if I was in a file in a subdirectory and I needed to access something above it, I would write: ../thefile.ext."}, {question:"What do I do if I have a string value and I want to convert it to a number?",answer:"Javascript has a built in function called parseInt(). That function takes in a string, and returns the leading digits as numbers. For example, if you call parseInt('123'), you'll get back the number 123. If you call parseInt('123contact'), you'll still get back the number 123. If you try to use parseInt without a leading number, you'll get back NaN, which means, not a number."}, {question:"What do I do if I have a number that I want to convert into a string?",answer:"If the browser is treating something as a number and you need it to be a string, you can just concatenate some empty quotes onto the end of it. So, if you have 123 and you want that to be a string, just put it into a variable and concatenate the empty quotes: var num = 123 + '';"}, {question:"When using CSS shorthand, does the order of the information count?",answer:"Yes. Some modern browsers are pretty good at figuring out stuff that's out of order, but remember that the browser is parsing (interpreting) the string. If it's going to do that properly, it needs to know which parts represent which pieces of information."}, {question:"If I find the solution to a project or activity online, can I just use that?",answer:"Um... no. That's cheating."}, {question:"Can I dynamically alter the href on an anchor tag?",answer:"Absolutely. Remember that every single attribute that belongs to an HTML tag is accessible through the Javascript object. So, if you capture an anchor tag into a Javascript variable (call it myAnchor), you can access the href through the dot (myAnchor.href).<br /><br />Be really, really, really, really, really, really, really, really, really, really, really careful when creating and changing URLs. If you're going out to the web, make sure you use the http:// prefix. If you're accessing one of the pages on your own site, you only need to make sure you use the proper relative path."}],
    projects: [{title:"Robot Builder", text:"Create a page that allows for the interactive design of a robot. Your robot will have 6 basic features and the user will be able to manipulate those features through the use of a control panel. Of the 6 features, 3 will be numerical (power level, top speed, structural integrity), 2 will be toggles (scanners and defensive systems), and 1 will be a choice between power types (hydro, nuclear, solar)."}, {title:"Haunted House", text:"Take the user through a multi-page adventure in a haunted house where the user will have to choose which way to go at every turn. Each decision could take the user closer to the exit or closer to a horrible end."}, {title:"The Convention", text:"The Convention is coming to town!  It's going to be grand, spectacular!  And the promoters have chosen you to create the web page for it. Your job is to build something that people will love to read, with information about guests and events. The success of the Convention depends on you. If your page is beautiful, people will get excited and come. If not... well, let's hope this isn't your last job."}, {title:"Match Game", text:"The match game is an intense, competitive game where you are revealing images in a desperate search for two that match. As you find matches, those images will be revealed, but watch out! The computer is keeping track of the number of times you click and judging your every move."}]
};