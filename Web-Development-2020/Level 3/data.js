const PAGE_DATA = {
    level: "Level 3",
    title: "Information Flow",
    lessons: [{title:"What is a Function, Really", objective:"Objective: To understand that information flows through a function.", description:"Information is stored, as values, in variables. It's the lifeblood of your program. If you want your program to work, the right information has to flow to the right places. Functions can be the veins and arteries of your program.<hr />",slides:[{text:"Let's start with something familiar.  Put some buttons on screen.  Their job is to add and subtract from a number.<br /><br />The buttons are dependant on a variable called 'modifier'.  This variable is adjusted directly from the button and then the function to modify is called.",image:"step1.PNG"},{text:"Here in initialize, we capture the HTML Element as an object and create the number and modifier variables.<br /><br />NOTE: We could update the number directly, eliminating the modifier entirely, but when you consider the pieces of information being manipulated in the program, you realize that number and modifier are different entities and should be kept separate either for expansion or just the sake of organization.",image:"step2.PNG"},{text:"The modifyNumber function will update the number and call display so that it appears on screen.",image:"step3.PNG"},{text:"Finally, the display function updates the output so that the user can see the number changing as (s)he clicks the buttons.<br /><br />If you run this, it should work.",image:"step4.PNG"},{text:"The modifier is such a transient variable.  It SHOULD be local, but it CAN'T be because we need to update it on a global scale.  Except that we don't.  Javascript, and really all program languages, has a tool for that.<br /><br />Let's take it out and see what happens.<br /><br />Don't see what happens now, though.  We still have more work to do.",image:"step5.PNG"},{text:"By placing the 'modifier' variable into the parentheses in the header of the function, we've created a paramter.<br /><br />A parameter is a local variable, meaning it exists only inside the function.<br /><br />This modifier and its value are specific to the modifyNumber function.  A modifier parameter added to another function will have a completely different value.",image:"step6.PNG"},{text:"Look at the adjustment to the buttons below.  Instead of giving the global modifier (which no longer exists) a value, we're passing the proper value into the function call through the parentheses.<br /><br />This value is called an argument.  An argument gets passed into the parameter, which receives it.  If all is written correctly, that value is the information the function needs in order to complete its task.<br /><br />Try this now.  It should work just the same.  Before you go on, give some time to the code and make sure you understand the sequencing and information flow.",image:"step7.PNG"},{text:"Let's turn this up a notch.  We've been working with Math.random(), but it's kind of cumbersome.  There's some parsing, some multiplication, some adding...  I want something simple, a function that takes a lower bound and an upper bound and gives me back a random integer between them.<br /><br />Let's write our own function.",image:"step8.PNG"},{text:"As I write this function, I don't know what my lower and upper bounds are.  How could I?  I want to use it find a random number between ANY two numbers.  So the lower and upper bounds are information I DON'T have that I DO need.<br /><br />Bam!  Parameters.",image:"step8.PNG"},{text:"In case you missed that:<br /><br />A parameter is a LOCAL VARIABLE in a function that represents a piece of information I DON'T HAVE, but I DO NEED.",image:"step8.PNG"},{text:"I am not limited to one parameter.  I can have as many as I want, separating them by commas.<br /><br />When I call the function, I will separate the arguments by commas as well.  Those arguments must appear in the same order as the parameters so that the values get slotted into the right variables.",image:"step8.PNG"},{text:"In order to work through the algorithm, you need to consider the different conditions that might exist.<br /><br />Generating a number from 0 to x is parseInt(Math.random() * (x + 1))<br /><br />What about generating a number from 1 to x?<br /><br />What about generating a number from x to y?<br /><br />What about generating a number from -x to y?",image:"step9.PNG"},{text:"WHAT is that return thing?<br /><br />Many functions manufacture a value of some sort.  That's their job.  Think about it.  This function's job is to generate a random integer.<br /><br />Okay, so now we've done that.  What do we do with it now?<br /><br />We return it!",image:"step9.PNG"},{text:"The 'return' statement has two jobs.<br /><br />1 - It ends the function right there.  If there's any code after the return statement, it will not be executed.<br /><br />2 - It takes the value specified and sends it back to the function call.<br /><br />What do we do with it, though?",image:"step9.PNG"},{text:"Let's make some changes.<br /><br />Let's modify the number by a random value between -10 and 10.  For that we only need 1 button.<br /><br />And it doesn't have an argument.",image:"step10.PNG"},{text:"No parameter is necessary because I can get all of the information I need through the use of the function.<br /><br />I call getRandomInteger, passing in my boundaries, and store the returned value in a variable called modifier.<br /><br />If you try this now, you'll see the number bouncing up and down as you click the button.",image:"step11.PNG"},{text:"Think about the way a function is represented in math. Just stay with me here.<br /><br />f(x) = x + 2<br /><br />f(3) = 3 + 2<br /><br />f(3) = 5<br /><br />f(x) is a function.<br /><br />x is the parameter.<br /><br />3 is the argument.<br /><br />5 is the return value.<br /><br />g(x) = x / 2<br /><br />g(f(3)) = ?<br /><br />f(3) returns a value (5), which is then passed into g(x), which returns another value.",image:"step11.PNG"},{text:"The cool thing about functions that return values is that their calls BECOME those values.  I don't really need the modifier variable at all.<br /><br />Take a breath.",image:"step12.PNG"},{text:"Because I can put the parameter back in...",image:"step13.PNG"},{text:"...and use the function call as the argument.<br /><br />The value created by the getRandomInteger() function is returned to the function call, which we are then passing as an argument to the modifyNumber function, which receives that value in the modifier parameter.<br /><br />It's not magic, but it is magical.",image:"step14.PNG"}]},
{title:"While Loops", objective:"Objective: You want to know how to write a while loop, of course.", description:"One of the most frequently asked questions I get is 'When do I use a loop?' Invariably, my answer is, 'When you need one.' This is not me trying to be clever or funny. A loop, just like every other coding tool, is meant to be used when you have a problem that needs it for the solution.<br /><br />A loop is a way of repeating the same code over and over again. Usually, your code is performing some task until some condition is met. Like a repeating if. Like, keep looking out the window until the cab gets here. You're waiting for a cab and you keep going to the window to see if it's arrived. Once it does, you won't need to look out the window again.<br /><br />All loops follow that same basic premise, but there are different kinds of loops.  I like to start with the while loop.<hr />",slides:[{text:"It's Halloween and you've got a bowl full of candy. As each child comes to the door, you hand out one piece of candy (cheapskate) at random. With the computer simulating this behavior, it will have to be aware of pieces of candy running out. We'll use loops to simulate this.",image:"step1.PNG"},{text:"Let's start with a basic layout.  We want to be able to see which candies we have in our bowl and how many of each are remaining.<br /><br />The candies we can code by hand, but the quantities will be generated randomly by the page.<br /><br />The button gives the user control over the program so it doesn't just flash by in a blur.<br /><br />The log will explain each happening as it happens.",image:"step1.PNG"},{text:"As always, let's start by identifying our HTML Element objects.",image:"step2.PNG"},{text:"We're juggling a lot of information in this program and we need variables to represent each piece.  Their values are initialized randomly.<br /><br />The candy log will keep a running display of everything that happens during the program.  It is initialized to an empty string.<br /><br />Finally, a call to display() will make sure that everything is up to date.",image:"step3.PNG"},{text:"The display function will take all of the values of the back end variables and make sure that they are represented correctly on screen.",image:"step4.PNG"},{text:"Let's give out some candy.  The first thing we need to do is choose a type of candy.<br /><br />The function chooses a piece of candy at random by generating a random number between 0 and 4.<br /><br />What good is that?!  Which candy is 0?  Well, that's up to you.",image:"step5.PNG"},{text:"I like to use constants in my programs.  Constants are basically variables that never change.  The purpose of constants is twofold:<br /><br />1:  Assigning a name to a value gives that value more meaning within your code.  Even though TWIX is 0, when I see TWIX in my code, it has a different meaning than all of the other zeroes in my code.<br /><br />2:  If I decide to change that value throughout the coding process, I can just change it in one place.  I don't have to hunt it down all of the instances of that value throughout my code.<br /><br />I use all caps to distinguish my constants from my other variables.  This is something that I do and is not required by the W3C, the browser, or even me.",image:"step6.PNG"},{text:"Notice the placement of the constants.<br /><br />The 'const' keyword can only be used outside of a function.  This means that all constants are global. They are discovered by the browser and logged into memory as the page loads.<br /><br />You cannot change their values.",image:"step6.PNG"},{text:"This if-else ladder runs through all of the candy types, checking them against the selected candy.  Whatever is selected loses 1 off of its value.  The call to display() updates the numbers.<br /><br />You can try this now, but note that we have not set the boundaries yet, nor have we updated the log.",image:"step7.PNG"},{text:"Let's start by updating the log.  The log is going to be a giant string of absolutely everything that happens in this program.  Each time something happens, a line is added to the top of the log.<br /><br />The &lt;br /&gt; in the string will be translated to HTML when it is added to the innerHTML of candyLogOutput.<br /><br />The concatenation puts the new text BEFORE the text already existing in candyLog.  Add similar entries to each of the candies and test the code.<br /><br />Make sure to update the log for each candy.",image:"step8.PNG"},{text:"The problem that we face is that we don't want the numbers to drop below zero.  If we have no Twix, then the computer should not be reaching into the bag and pulling out a Twix.  It needs to find something that it does have.<br /><br />The solution to the problem is this:<br /><br />Select a piece of candy.<br /><br />If I don't have that piece of candy, select again.<br /><br />The problem is that I may select that piece of candy again.  So the real solution is this:<br /><br />Select a piece of candy.<br /><br />While I don't have that piece of candy, select again.<br /><br />This solution will continue to select until it finds something that I can use.",image:"step8.PNG"},{text:"One of the things that's easily forgotten when coding a solution to a problem is that there are things that we, as humans, know inherently that the computer does not.  If we want a computer to keep track of something, we need to give it a variable that holds that information.<br /><br />In this example, the piece of information is whether or not we have the selected piece of candy.  If you have an actual bowl of candy, you look inside and see no Twix so you grab something else.  In order for the computer to be able to recognize that, we'll create a boolean.<br /><br />The boolean starts as true because nothing has been selected yet.  It will represent whether or not we have the candy selected and it will drive our while loop.",image:"step9.PNG"},{text:"Almost everything in the function is going inside that loop.<br /><br />Like an if conditional, a while is dependant upon a boolean condition.  Since badSelection is a boolean itself, its value is enough to trigger or exit this loop.<br /><br />while (badSelection) is the same as writing while (badSelection == true)",image:"step10.PNG"},{text:"The code for each of the candies needs to be updated now.  The most important thing is to check whether or not we have that candy.<br /><br />If we do, then we proceed as before, BUT we also need to change badSelection to false.<br /><br />Whenever you're dealing with a loop, you have to keep control of the condition.  If you never change the circumstances that affect the condition, you wind up with an infinite loop.<br /><br />That's bad.",image:"step11.PNG"},{text:"Can you update the rest of the function so that the program won't hand out candy that it doesn't have?<br /><br />Remember to customize the text in the log so that the user will be able to see which candies were given out and which ones weren't.",image:"step11.PNG"},{text:"Did you try it?  Did you give out all of the candies?  Did it crash?<br /><br />Loops are dangerous.  There's always a chance you'll create an infinite loop and then it's game over.<br /><br />In this particular case, the problem occurs when you run out of candy.  As the computer continues to select, it continues to find that there are none left.  Imagine reaching into an empty bowl and being determined to reach inside until you find a candy.<br /><br />That's what we've programmed the computer to do.",image:"step11.PNG"},{text:"What we need to do is make sure there's some candy before reaching into the bowl.  If there's no candy in the bowl, we do nothing.  We can check this first thing.<br /><br />If we add up all of the candies and we have 0 then we have no candies left.  Log it and do nothing else.<br /><br />Otherwise, do everything else.  All of the other code in this function should go into the else EXCEPT the call to display().  That happens regardless.",image:"step12.PNG"},{text:"If you've done it right, this function is almost 100 lines long.  Even with the limited tools at our disposal, there are ways to be more efficient.  Look for pieces of code that repeat almost exactly and think about the differences in those lines.  What needs to change?  Can we shrink the code?",image:"step12.PNG"},{text:"In the revised version of the code, I've used a variable to keep track of the candy name.  This allows me to code the log entry once instead of repeatedly.  It saved more than 20 lines of code.<br /><br />Finding ways to express the same solution more succinctly and more efficiently is something that comes with experience.  You should always code your solutions so that they work FIRST.  Afterwards, you can begin looking for ways to improve either the solution or the code.<br /><br />As you learn more programming tools, you'll be better equipped to do this.<br /><br />Once you think you've understood this code, check out the Guess The Color sample.  Read the instructions and try and write the code before you download it.",image:"step13.PNG"}]},
{title:"Forms", objective:"Objective: To understand the relationship between the form tag and the form controls.", description:"The web is a highly interactive environment. That means that the user needs to communicate with the page and the page needs to react and respond to the user. We've been playing around with that a bit. After all, button clicks and hyperlinks are a form of interaction, but they're restrictive.  Form controls are much more dynamic.<br /><br />In the frontier times, using forms was a way to get information from one page to another. Those conventions are still available, but they've been joined by lots of more efficient ways to make that happen.<br /><br />Even when not sending data, forms are really useful.  The way they keep track of their child elements can make your life as a programmer much easier.<hr />",slides:[{text:"Start with a form tag.  There's nothing terribly special about it.  It's just a regular tag and we've given it an id.  If you run the page, you won't see anything.",image:"step1.PNG"},{text:"The input tag is a little more interesting. It's self closing, for one.  What does that mean?<br /><br />Come on.<br /><br />Think about it.",image:"step2.PNG"},{text:"It has no innerHTML.<br /><br />The 'type' attribute can have many different values, giving us the ability to create varying types of inputs. If you run this now, you'll see a couple of text boxes.",image:"step2.PNG"},{text:"There's not a lot you can do with the text boxes until you throw in some Javascript.  However, I want you to be familiar with a couple of terms:<br /><br />When you click on one of them, you're giving it <b><i>focus</i></b>.  When a control has focus, there are all kinds of things you can do with it.  When you click onto something else, that control is <b><i>blurred</i></b>.<br /><br />I don't know if you noticed, but I snuck in an h1 tag and a button.  Put those into your code.",image:"step3.PNG"},{text:"We need some Javascript. Let's write some Javascript.<br /><br />Notice that there is an object for the form and one for the greeting, which is outside the form.  We've also made back end variables for the user's name.<br /><br />Even though, as a sample, this may appear to be all front end, it's good practice to always have back end variables in case your project expands.",image:"step4.PNG"},{text:"The recordData() function is another issue.  We want the information for firstName and lastName to come from those text boxes.  Normally, that would mean ids and getElementByIds.  With a form, though, the process is a little different.",image:"step5.PNG"},{text:"Instead of using ids, let's give those text boxes names.  I know, it seems silly.  Name and id are pretty much the same thing.<br /><br />But they're not.  In fact, an element could have both, depending on what you want to do with it.<br /><br />Here, though, we're working with just the name.",image:"step6.PNG"},{text:"Take a long hard look at this code. It's a glimpse into the depth of the document object model.<br /><br />The form is an object and we've captured it into a variable.  We've done this many times before and we will continue to do it until someone invents a better way.<br /><br />Anything inside the form is accessible to us through the form object.  And we can access it by name.",image:"step7.PNG"},{text:"The other piece of this is value property of the input object.<br /><br />All input tags have a value.  You can even set it as an attribute in the HTML tag.  The value of a text box is whatever's typed into the box.",image:"step7.PNG"},{text:"Now add a little bit of code that clears out the value of the text boxes.  This is just a neat little trick that empties the fields so you don't have to highlight and delete if you want to enter a different name.",image:"step8.PNG"},{text:"Bring it all together with the display function and you'll get a greeting every time you click on the 'Get Greeted' button.<br /><br />Try this.  Keep trying it by typing in new names.<br /><br />Keep trying it until you understand it.",image:"step9.PNG"},{text:"Look! A checkbox!<br /><br />Go ahead and run it.  You know you want to.  The checkbox won't do anything, but I think you need to get it out of your system.",image:"step10.PNG"},{text:"Here's a neat trick.  Notice how there's a label around the checkbox and its text?  That label allows the user to activate the checkbox by clicking on the text.",image:"step11.PNG"},{text:"Let's get down to business.  Go into initialize and create a back end variable that determines whether or not the user eats pizza.<br /><br />Since the checkbox starts as unchecked (which we can change by the way), we'll start this variable off as false.<br /><br /><i>If you wanted the checkbox to start as checked, you could put the word 'checked' into the tag as if it was an attribute.  You don't give a value.  Just 'checked'.</i>",image:"step12.PNG"},{text:"In recordData, we're going to set the value of our backend 'eatsPizza' variable based on whether or not the checkbox is checked.<br /><br />Instead of using the value attribute, we'll use the <b><i>checked</i></b> attribute.  It's a simple boolean that's true if the box is checked and false if it's not.<br /><br />You can give a checkbox a value, but it would only be for infomrational purposes.  It will not show up anywhere in your display.",image:"step13.PNG"},{text:"Let's try to be clever here.  The greeting remains the same, but we want the page to notice whether or not the user likes pizza.<br /><br />The output is now dependent on the value of the back end variable.  Yes, we could have checked the box directly, but it's not good practice. Having a back end makes things so much more organized when it comes to larger programs.",image:"step14.PNG"},{text:"I want to take this opportunity to bore you by making a point.  At the beginning of a project it will almost always seem easier to use the front end information.  As you move on, this will become a tangle of data that is not easily sorted out.<br /><br />Your front end is informed by your back end.<br /><br />Your displays shows the information in the variables.<br /><br />Keep them as separate as possible.",image:"step14.PNG"},{text:"Radio buttons are a very different animal.  The whole idea of a radio button is that you can only choose one at a time and you can't just unselect one the way you do with a checkbox.<br /><br />Radio buttons come in groups, like big ugly multiple choice questions.  Did you notice that they all have the same name?  Did you think that was a mistake?",image:"step15.PNG"},{text:"In order to make sure the browser knows which radio buttons are grouped together, we give all of the ones in the same group the same name.  This is where the 'name' attribute vastly differs from the 'id' attribute.<br /><br />The id attribute needs to be unique to the entire page.<br /><br />The 'name' attribute can be used to identify groups.",image:"step15.PNG"},{text:"Back to initialize to set up a back end variable for the user's place of origin.",image:"step16.PNG"},{text:"And into recordData to save the value from the...<br /><br />Wait.<br /><br />The value?<br /><br />Which value?<br /><br />This is the magic of radio buttons.  When you access the group by name, the <b>value</b> of the <b>group</b> becomes the value of the selected radio button.",image:"step17.PNG"},{text:"With a small change to the greeting, the value that we copied into our placeOfOrigin variable gets displayed on screen.",image:"step18.PNG"}]},
{title:"Lists", objective:"Objective: To use lists to understand the relationship between container elements and their children.", description:"There are 2 types of list, the ordered list, which numbers its items, and the unordered list, which uses bullets instead.<br /><br />Lists themselves are container tags. Remember that term. Container. They're objects that hold other objects inside of them. So ordered lists use the tag &lt;ol&gt; and unordered lists use the tag &lt;ul&gt;. Pretty simple, right? Except that these two tags don't really do anything by themselves. They're just containers.<br /><br />Like all good containers, you're supposed to put something into them. In this case, you're going to put list items (&lt;li&gt;) into them. You open up a list, put in a bunch of list items, and then close the list.<hr />",slides:[{text:"Let's start with an unordered list.  We'll make a list of film genres.<br /><br />This list is pretty simple.  It has all of the genres listed with simple disc bullets.  If you were to switch the ul to an ol, you would have numbers instead of bullets.  Both types of lists use li tags to define the elements of the list.",image:"step1.PNG"},{text:"You can put anything inside of the list container.  It doesn't have to be just li tags.  This isn't particularly useful right now, but it becomes useful later on when you start manipulating the list as a whole.<br /><br />Remember that the ul or ol tag is just a container.  It defines the boundaries of your list.",image:"step2.PNG"},{text:"Before CSS, there was a need for different list types.  Now...not so much.  You can redefine the bullets with the list-style-type property.  The values are:<br /><br />decimal<br />lower-alpha<br />lower-roman<br />none<br />upper-alpha<br />upper-roman<br />disc<br />circle<br />square<br /><br />Any one of these will work with either ordered or unordered lists, making them virtually the same mechanically.<br /><br />You can also use custom bullets by setting a value for the property list-style-image.<br /><br />list-style-image:url('mybullet.PNG');<br /><br />Do not use this AND list-style-type.",image:"step3.PNG"},{text:"You can also change the position of the bullets using list-style-position. The values for this are inside and outside. The default is outside. Positioning them inside gives them a bit more indentation.",image:"step4.PNG"},{text:"Lists are really nice for helping us build structure into our page.  With CSS giving us control of the bullets and the positioning, lists are a nice way to make sidebars or even dropdown menus.<br /><br />li tags are block elements, which is why the items in the list show up on different lines.  Later, when you learn some advanced CSS, you'll see how to manipulate elements to display the way you want them to.",image:"step2.PNG"},{text:"One of the nice things you can do with lists is nest them.  That is, make lists within lists.<br /><br />When you're nesting lists, you should consider how you want them to appear.  In the example below, I've used h4 tags to define the headings of each sub-list.  Since each sub-list is a list-item, it gets a number also.  Since h4 tags are block elements, they are on a different line as the number.<br /><br />It's pretty ugly.",image:"step5.PNG"},{text:"If we change the list-style-type of the ul tags, we can eliminate the numbers and make the list look much better.<br /><br />We want to keep each sub-list as an li of the original list.  When working with advanced Javascript and CSS, having these blocked together can be extremely useful.",image:"step6.PNG"},{text:"Dress it up a bit.  It's not terribly fancy, but it's a start.",image:"step7.PNG"}]},
{title:"Tables", objective:"Objective: To build some tables using HTML", description:"Tables are another construct that's built by combining multiple tags together. They are used for pages that need to display data in an organized manner.<br /><br />Way back in prehistorice times, before CSS became the norm, Neanderthals used to lay out their web pages using tables. Table design was all the rage back then, but quickly fell out of favor as CSS provided better functionality.<br /><br />When designing your page using tables, things can get really complicated. You need tables inside of tables inside of tables. It's an ugly affair that confuses humans and puts extra stress on precessors.<br /><br />Don't do it.<br /><br />Tables are for data.<hr />",slides:[{text:"A table is built by using 3 tags.<br /><br />The <b>table</b> tag is the container for all things table.<br /><br />The <b>tr</b> tag, or the table row tag, defines a new row for the table.<br /><br />The <b>td</b> or table data tag is the container for the data stored in the cell.<br /><br />If you run the code shown (you should run the code shown), it won't look like very much.  It'll show all of the data, but there's no formatting so it may not really look like a table at all.",image:"step1.PNG"},{text:"But, of course, that's why we have CSS. With complex tag structures, like a table, the question becomes what to style and how.<br /><br />We can add a border around the table with CSS borders.  CSS borders are composed of 3 properties:<br /><br />border-style, which can have values of none, dotted, dashed, solid, double, groove, ridge, inset, outset.<br /><br />border-width, which can be thin, medium, thick, or some number with a unit of measure (px, in, cm).<br /><br />border-color, which uses the standard methods for setting color.",image:"step2.PNG"},{text:"Borders also have a shorthand:<br /><br />border:width, style, color;<br /><br />You can omit the color and it will default to black.<br /><br />You can also program different sides of your border by using the border-right, border-left, border-top, and border-bottom properties.  Those are shorthands, but you can get very specific by specifying side and property (border-right-style, border-top-color, border-bottom-width).",image:"step3.PNG"},{text:"You may have noticed that, while styling the table tag puts a border around the table itself, it does nothing for the individual cells. If you want borders throughout the table, you need to style your td tags.",image:"step4.PNG"},{text:"There are a couple of things you can do to dress up your table and make it easier to look at.<br /><br />If you want some space between your content and the cell borders, add padding.  Padding is coded very much like borders, except it's just a measurement.  It adds space around the content.  You can specify a side (padding-left, padding-right, padding-top, padding-bottom).<br /><br />You can also use a shorthand for padding where the values have meaning depending on how many you include.<br /><br />padding:top right bottom left<br /><br />paddding:top right&left bottom<br />padding:top&bottom right&left<br />padding:all",image:"step5.PNG"},{text:"You can also bring those borders together to eliminate the spaces between cells using border-collapse:collapse.<br /><br />Note that this is programmed through the table tag. <br /><br />The reason is because the table has control of, and is aware of, all of its cells.  A single cell cannot collapse borders because it has not borders inside of itself.<br /><br />It's all about the hierarchy of elements.",image:"step5.PNG"},{text:"Like everything else, your table is being built top-down.  That means that the browser is adding to the page as it sees your code.  There are only 2 cells in the first row.  When it gets to the 3rd cell in the second row, it has to expand the size of the table to fit the cell, but it's not going to go back up and install an empty cell.  You didn't code one.<br /><br />For all intents and purposes, your table has 3 columns, but you need to be in control of the layout.",image:"step6.PNG"},{text:"Let's create a real table of data.  I want a table that will show all of the Major League Baseball teams broken up by division and league.<br /><br />I've started with my header row.  I've used a th instead of a td  The th stands for table header and the text inside will be bold and centered.  More importantly, you can use the distinct tag for styling.",image:"step7.PNG"},{text:"Put some borders in for the table headers.  These borders are a bit thicker than the rest.",image:"step8.PNG"},{text:"Now we break it down into the 6 divisions (west, central, east for each league).<br /><br />Try this and see how it looks.",image:"step9.PNG"},{text:"Definitely not what we were looking for..  The league headings are all squeezed over when they should encapsulate 3 divisions each.<br /><br />The <b>colspan</b> attribute tells HTML to stretch a single cell over several columns.<br /><br />In this case, we're using 3 so that the league covers all 3 of its divisions.<br /><br />Even though the value of colspan is a number, it should always be entered in quotes.  All attribute values are first interpreted as a string.",image:"step10.PNG"},{text:"Now fill in the teams.",image:"step11.PNG"},{text:"You can change the widths of your table and your cells.  You can use pixel measurements, but they tend to be unreliable because you never know what the resolution is on the client machine.<br /><br />As with anything, the percentage here is of the parent.  The table is 100% of the width of the document.  The cells are stretched automatically, but by making them 15% of the width of the table, they are all stretched to an even width.<br /><br />Even though 15 * 6 doesn't equal 100%, the browser will account for the difference, leaving no empty space.  If you were to make them larger, however, you would have a problem because some of the cells would be bigger and the others would be smaller.",image:"step12.PNG"},{text:"Let's get a little crazy.<br /><br />Let's make a runner down the side of the table that says 'MLB'.<br /><br />This is not enough.  Run it and see.",image:"step13.PNG"},{text:"There's a colspan.  Why can't there be a rowspan?  But why '8'?<br /><br />The league titles are one row and the teams and divisions are 6 rows.  That's only 7 rows.<br /><br />But, of course, the MLB sidebar is actually a row.  Even though it no longer takes up a row of its own, the browser sees it as a row and takes it into account.<br /><br />Try changing it to '7' and see what happens.",image:"step14.PNG"},{text:"Finally, let's have a little fun.<br /><br />Put the MLB into a div.  Don't run it because it doesn't do anything yet.",image:"step15.PNG"},{text:"However, if you style it a bit, you get some nice results.",image:"step16.PNG"}]},
{title:"Dynamic Tables", objective:"Objective: To manipulate tables using Javascript", description:"Data is very rarerly static.  That means that, when your web page loads, there's no way of knowing how much data will be displayed on the page.  You might not even know what the data necessarily looks like.  So your code has to operate off of a set of parameters and adjust accordingly.",slides:[{text:"For this lesson, we're going to make a simple table that displays the results of some dice rolls.<br /><br />For now, let's start with an empty table with some headings.",image:"step1.PNG"},{text:"Give it some borders so that you can read the results.<br /><br />Notice the comma between th and td.  This means I want to program the same style for both th and td tags.  If, later, I decide I want to do something for one, but not the other, I can do that by setting up a separate block for the one I want to program.  As long as there are no contradictions, CSS will apply all of the styles.",image:"step2.PNG"},{text:"Let's include out utilities Javascript file we created during tutorial 15.  Remember that the file needs to be copied into the folder with this file so that the browser can find it.<br /><br />After that, let's roll some dice.",image:"step3.PNG"},{text:"Most of this program will be handled on the fly so we're not keeping track of any information except the dice table itself.  If you were to expand on this, you would certainly need to build a foundation of global variables.<br /><br />For now, let's roll dice a random number of times.  Something between 25 and 100 times.  That getRandomInteger() function is in the utilities file.",image:"step3.PNG"},{text:"The question you should be asking yourself is, how am I going to add rows each time I roll the dice?<br /><br />That's a good question, but let's just get the dice rolling first.<br /><br />Exactly how many times do I want to roll the dice?<br /><br />Hint: The answer is not between 25 and 100.",image:"step3.PNG"},{text:"The actual answer is 'numRolls'.  I want to roll the dice numRolls times.  That variable will have a value between 25 and 100, but that value will change with each execution of the page so I don't really have any control over it.<br /><br />How do I do something multiple times?<br /><br />Hint: The answer is <b><i>NOT</i></b> to create 100 functions and only use the ones I need.",image:"step3.PNG"},{text:"The answer is a loop, of course.  We could use a while loop here, but we're counting.  For loops are better for counting.  In fact, they're often called counting loops.<br /><br />A for loop has 3 main parts:<br /><br />for (initialization; condition; action)<br />{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;code;<br />}<br /><br />The loop initializes a counter variable, usually to 0, but that's not a rule.<br /><br />It will continue for as long as the condition is true.<br /><br />At the end of each iteration (there's that fancy word for cycle, again), it will perform an action, usually to alter the counter variable, but that's not a rule, either.",image:"step4.PNG"},{text:"It's a good idea to plan out what's going to happen throughout the course of this loop.  The use of commented steps will help when we're developing the code.",image:"step5.PNG"},{text:"Step 1: Roll the dice.<br /><br />We use our getRandomInteger() function again to get a number between 1 and 6.  Make sure to store that in a nice local variable.",image:"step6.PNG"},{text:"Step 2: Add a row to the table.<br /><br />The table object has a function called insertRow().  This function, when called without an argument, will add a row to the end of the table AND return the object for the new row.",image:"step7.PNG"},{text:"Step 3: Put the roll number into the first cell.<br /><br />Like the table having a way to add rows, each row has a way to add cells.  Like the insertRow() function, the insertCell() function adds a cell to the row and returns the new cell as an object.<br /><br />We can then alter the contents of the cell by assigning a value to its innerHTML.<br /><br />I've used string building.  The counter is used to tell us which roll, but since the counter starts at 0, we have to add 1 to its value.  The parentheses are vital so that the browser adds i and the 1 together as numbers.  Without the parentheses, everything would be converted to a string.",image:"step8.PNG"},{text:"Step 4: Put the roll itself into the second cell.<br /><br />Again, create a new cell and put the result into its innerHTML.  Remember that insertCell() adds a cell to the end so, as long as we go in order, we should be fine.<br /><br />I reuse the variable newRow because I'm already done with it.  Reusing temporary variables is fine.  You can also make a new variable if you find reusing the temporary ones confusing.",image:"step9.PNG"},{text:"That's it.  Every time you run this now, you're going to see between 25 and 100 die rolls fill up the table.<br /><br />Don't take my word for it.  Try it.<br /><br />Take some time to look at all of this a second time.  When you're done, go ahead and pick a Level 3 project.",image:"step9.PNG"}]}],
    samples: [{title:"Guess the Color", lesson:"While Loops", text:"Just how long will it take the computer to crack a code?<br /><br />Create 3 variables (red, green, and blue) and assign each one a random number between 0 and 255.  The computer must try and figure out that color by randomly guessing the red, green, and blu values individually.<br /><br />As it guess, log the guesses.<br /><br />Once it has the right color, stop and change the background color of the screen to match."}, {title:"Top 5", lesson:"Lists", text:"You can build your top 5 list of ANYTHING!<br /><br />The Top 5 sample shows a changeable title and your list of 5 slots.  Below that is a control panel which allows the user to select the title of the list with a text box and add an item with a combination of a text box and radio buttons indicating where on the list the item should appear."}],
    faq: [{question:"When do I use a parameter?",answer:"When you need one.<br /><br />Parameters are a good reason to plan out your solution before coding it. When you sit down to write a function, you need to think about what that function needs to do and what information is necessary to that task. If there's any of that information missing, don't stop to look for it. Create a parameter to receive it. Most of the time, when you go to call that function, you will realize that that information is available."}, {question:"When do I use a return value?",answer:"When you need one.<br /><br />If your function manufactures a value, your instinct will be to store it in some global variable. Sometimes that's okay. The variable may be important to the program as a whole. But, if that value is important to the moment, just return it. Wherever the function is being called, that value will be returned and you can use it as necessary."}, {question:"Why do you keep saying, 'when you need one'?",answer:"One of the biggest pitfalls of learning program is approaching it incorrectly. There are no formulae for writing a program. You can't memorize something you've seen and universally fit it into a neat package. Understand the problem. Design a solution. Code the solution. Use the tools you have when you need them."}, {question:"When do I use a loop?",answer:"Wait for it...<br /><br />When you need one.<br /><br />We tend to approach things from a very singular perspective. If you've been asked to write a program, you want to get writing that program. The truth, however, is that a program is really just the implementation of the solution of a problem.<br /><br />Stay with me here.<br /><br />A program is just the implementation of a solution to a problem.<br /><br />You're given the problem going in. From there, you need to work out the solution. That's the step that often gets skipped.  Coding is easy if you know what you want to code. If you haven't worked out the solution, however, you wind up trying to solve the problem <i>through</i> code, which is difficult and unnatrual.<br /><br />Solve the problem first. Then code the solution."}, {question:"What's the difference between a while loop and a for loop?",answer:"Functionally, nothing. You can do anything with a while loop that you can do with a for loop and vice versa. For loops, however, are syntactically (fancy word for grammar) designed for iterating (fancy word for cycling) through data structures (fancy term for lists of information)."}, {question:"What's a for loop?",answer:"Patience, my young friend. Patience."}, {question:"How does Siri work?",answer:"Artificial Intelligence works off of a library of data.  Its algorithms are built to draw correlations from the data it has stored so that it can formulate appropriate responses."}, {question:"Is Siri the first step towards Skynet?",answer:"No.  No matter how advanced our algorithms, artificial intelligence is still artificial.  That means its behavior is always controlled and predictable."}, {question:"What's Skynet?",answer:"Skynet is the fictitious network that attacked humanity in the Terminator movies."}, {question:"",answer:""}],
    projects: [{title:"Black and Red", text:"Two players (human vs. computer) each have 2 piles of tokens (one pile of black and one pile of red). On a player's turn (s)he will roll a black die and a red die and manipulate his or her or the opponent's pile of tokens based on the dice rolls. The object of the game is to get rid of all of the black tokens and have the most red tokens."}, {title:"One on One Fighter", text:"Two fighters go in. Only one comes out. Depending on your interests, they can be any type of fighters. Gladiators, pokemon, superheroes and villains, the real housewives of New Jersey. It's up to you. A single player will take on the computer in a round by round combat until one of the combatants is knocked out."}, {title:"Roll Roll Roll Your Dice", text:"International dice expert, Danielle Danziger needs to run some numbers on some dice rolls. She's decided to hire you to create a web page for her that will roll a whole bunch of dice and report the very important results."}, {title:"Slider Puzzle", text:"Write a simple slider game where the user puts numbers in order by moving 'tiles' around."}, {title:"Xtreme Rock Paper Scissor", text:"XRPS is a two player game where each player controls a limited arsenal of rocks, papers, and scissors that they must play against each other. The object of the game is to capture all of the weapons in your opponent's arsenal."}]
};